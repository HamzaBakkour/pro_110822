{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the documentation of Pro_110822 Pro_110822 allows you to control several computers through one keyboard and mouse. Please check the Source Code tap for the documntation of the public methods in this project.","title":"Overview"},{"location":"index.html#welcome-to-the-documentation-of-pro_110822","text":"Pro_110822 allows you to control several computers through one keyboard and mouse. Please check the Source Code tap for the documntation of the public methods in this project.","title":"Welcome to the documentation of Pro_110822"},{"location":"index.html#_1","text":"","title":""},{"location":"index.html#_2","text":"","title":""},{"location":"index.html#_3","text":"","title":""},{"location":"index.html#_4","text":"","title":""},{"location":"index.html#_5","text":"","title":""},{"location":"index.html#_6","text":"","title":""},{"location":"index.html#_7","text":"","title":""},{"location":"index.html#_8","text":"","title":""},{"location":"index.html#_9","text":"","title":""},{"location":"index.html#_10","text":"","title":""},{"location":"licence.html","text":"","title":"Licence"},{"location":"mainwindow.html","text":"The programs main window module CLASS MainWindow constins the following methods __init__ on_shortcut_activate define_shortcuts _search_for_servers _add_server _establish_connection_to_server _create_server _handle_client_requests _estaplish_connection_to_client _add_client_widget _close_server _update_p_bar _reseat_p_bar MainWindow Bases: QMainWindow Source code in pro_110822\\mainwindow.pyclass MainWindow ( QMainWindow ): def __init__ ( self , parent = None ) -> None : super ( MainWindow , self ) . __init__ ( parent ) #Program title self . setWindowTitle ( \"pro_110822\" ) #Main window resulotion self . setFixedSize ( 600 , 800 ) #Main window layout self . mainWidget = QtWidgets . QWidget () self . mainWidget . layout = QGridLayout () self . mainWidget . layout . setContentsMargins ( 0 , 0 , 0 , 0 ) self . mainWidget . layout . setSpacing ( 0 ) self . mainWidget . setLayout ( self . mainWidget . layout ) self . setCentralWidget ( self . mainWidget ) #Thread pool self . threabool = QThreadPool () self . threabool . setMaxThreadCount ( 20 ) #Start the program with ClientView self . mainWindowView = ClientView () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWindowView . makeServerButton . clicked . connect ( self . _create_server ) self . mainWindowView . refreshButton . clicked . connect ( self . _search_for_servers ) self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . pBar ) self . pbarValue = 0 #Variables used to handle connections self . clientsConnections = [] self . onShortcutActivateArgument = [] self . sendUserInput = SendUserInput () #Define server shortcut self . connectionID = 1 self . shortcutListner = False self . define_shortcuts ( '<ctrl>+m+' + str ( self . connectionID ), addToExist = False ) def on_shortcut_activate ( self , m ): \"\"\" This method is called when a shortcut is pressed by the user. \"\"\" print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'shortcut detected >>> { m } ' ) #Server shortcut if ( m == '<ctrl>+m+1' ): self . sendUserInput . supress_user_input ( False ) self . sendUserInput . send_input_to_client ( None ) else : #Client shortcut self . sendUserInput . supress_user_input ( True ) try : self . sendUserInput . send_input_to_client ( self . clientsConnections [ int ( m [ - 1 ]) - 2 ]) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , ex ) def define_shortcuts ( self , * args , addToExist = False ): \"\"\" Define the shortcuts that the listner should listen to. If a shortcut is pressed the method on_shortcut_activate is called and the shortcut is passed to it. \"\"\" if ( len ( args ) == 0 ): if self . shortcutListner : self . onShortcutActivateArgument = [] self . shortcutListner . stop () return if ( addToExist == False ): argg = '{' for _ in range ( len ( args )): argg = argg + \"'\" + args [ _ ] + \"'\" + ':' + ' lambda self = self : self._on_shortcut_activate( {} )' . format ( \"'\" + args [ _ ] + \"'\" ) + ', ' argg = argg [: - 2 ] + '}' self . onShortcutActivateArgument = [] self . onShortcutActivateArgument . extend ( args ) elif ( addToExist == True ): args = list ( args ) args . extend ( self . onShortcutActivateArgument ) argg = '{' for _ in range ( len ( args )): argg = argg + \"'\" + args [ _ ] + \"'\" + ':' + ' lambda self = self : self._on_shortcut_activate( {} )' . format ( \"'\" + args [ _ ] + \"'\" ) + ', ' argg = argg [: - 2 ] + '}' self . onShortcutActivateArgument = [] self . onShortcutActivateArgument . extend ( args ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , '_define_shortcuts / args :' , args ) if self . shortcutListner : self . shortcutListner . stop () self . shortcutListner = keyboard . GlobalHotKeys ( eval ( argg )) self . shortcutListner . start () else : self . shortcutListner = keyboard . GlobalHotKeys ( eval ( argg )) self . shortcutListner . start () def _search_for_servers ( self ): \"\"\" Starts the \"search for servers worker\" \"\"\" self . _reseat_p_bar () self . mainWindowView . availableServers . reseat () self . _update_p_bar ( 15 , \"Searching for servers.\" ) #Set the \"search for servers worker\" self . searchConntection = SearchForServersWorker ( 12345 ) #Connect the worker's connectionOkSignal signal to the function addServerToServersArea #The worker will send this signal to the main thread in case it manages to connect to a server on the local network self . searchConntection . signal . foundServer . connect ( self . _add_server ) #The worker will send this signal to the main thread to update the progress bar when it manages to connect to a server on the local network self . searchConntection . signal . pbarSignal . connect ( self . _update_p_bar ) #Start the woker self . threabool . start ( self . searchConntection ) def _add_server ( self , serverName : str , serverIP : str , serverPort : int ) -> None : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"emited from searchForServers : \" , serverName , serverIP ) serverWidget = ServerWidget ( serverName , serverIP ) self . mainWindowView . add_deivce ( serverWidget ) serverWidget . connectToServer . clicked . connect ( lambda : self . _establish_connection_to_server ( serverIP , serverPort )) def _establish_connection_to_server ( self , serverIP : str , serverPort : int ): self . reciveMouseMovement = ReciveUserInput ( serverIP , serverPort ) self . threabool . start ( self . reciveMouseMovement ) def _create_server ( self ): #Remove ClientView. self . mainWindowView . remove () self . pBar . remove () #Start ServerView. self . mainWindowView = ServerView () self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWidget . layout . addWidget ( self . pBar ) self . mainWindowView . stopServerButton . clicked . connect ( self . _close_server ) #Create the server socket self . serverSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . serverSocket . setblocking ( False ) self . serverSocket . bind (( '' , 12345 )) #Pass the server socket to ServerWorker self . serverWorker = ServerWorker ( self . serverSocket ) #Send clients requests to _handle_client_requests self . serverWorker . signal . clientRequest . connect ( self . _handle_client_requests ) self . threabool . start ( self . serverWorker ) #Start listning for user input self . sendUserInput . start_listning () def _handle_client_requests ( self , data : str ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Recived client request : \" , data ) try : if ( data . split ( '!' )[ 0 ] == 'C' ): #'C' stands for Connection requst #Connection requsts format \"C!CLIENT_SCREEN_W!CLIENT_SCREEN_H!CLIENT_PORT!CLIENT_NAME!CLIENT_IP\" CLIENT_SCREEN_W = data . split ( '!' )[ 1 ] CLIENT_SCREEN_H = data . split ( '!' )[ 2 ] CLIENT_PORT = data . split ( '!' )[ 3 ] CLIENT_NAME = data . split ( '!' )[ 4 ] CLIENT_IP = data . split ( '!' )[ 5 ] except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Exception raised while handling client requst. \\n Requst data: \\n {} \\n \\Exception: \\n {} \" . format ( data , ex )) self . _estaplish_connection_to_client (( CLIENT_SCREEN_W , CLIENT_SCREEN_H ), CLIENT_IP , CLIENT_PORT , CLIENT_NAME ) def _estaplish_connection_to_client ( self , clientScreenResolution : tuple , clientIP : str , clientPort : str , clientName : str ): #Define client shortcut self . connectionID = self . connectionID + 1 self . define_shortcuts ( '<ctrl>+m+' + str ( self . connectionID ), addToExist = True ) #Connect server to client self . clientsConnections . append ( socket . socket ( socket . AF_INET , socket . SOCK_STREAM )) try : self . clientsConnections [ - 1 ] . connect (( clientIP , int ( clientPort ))) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Exception raised while server trying to connect to client. \\n Server socket: {} \\n Cient IP: {} \\n Client Port: {} \\n\\n Exception: \\n {} \" . format ( self . clientsConnections [ - 1 ], clientIP , clientPort , ex )) #Add client widget to the UI self . _add_client_widget ( clientName , clientIP , self . clientsConnections [ - 1 ] . getsockname ()[ 1 ]) def _add_client_widget ( self , clientName , clientIP , clientPort ): client = ClientWidget ( clientName , clientIP , clientPort ) self . mainWindowView . add_client ( client ) def _close_server ( self ): #Terminate serverWorker, serverSocket and user-input listner self . serverWorker . alive = False self . serverSocket . close () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Server Socket terminated\" ) self . sendUserInput . stop_listning () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Input listner terminated\" ) #Remove ServerView and set the new view to ClientView self . mainWindowView . remove () self . pBar . remove () self . mainWindowView = ClientView () self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWidget . layout . addWidget ( self . pBar ) self . mainWindowView . makeServerButton . clicked . connect ( self . _create_server ) self . mainWindowView . refreshButton . clicked . connect ( self . _search_for_servers ) def _update_p_bar ( self , value , text ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , text ) if ( value == 999 ): self . _reseat_p_bar () else : self . pbarValue = self . pbarValue + value self . pBar . value ( self . pbarValue ) self . pBar . text ( text ) def _reseat_p_bar ( self ): self . pbarValue = 0 self . pBar . reseat () define_shortcuts ( * args , addToExist = False ) Define the shortcuts that the listner should listen to. If a shortcut is pressed the method on_shortcut_activate is called and the shortcut is passed to it. Source code in pro_110822\\mainwindow.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def define_shortcuts ( self , * args , addToExist = False ): \"\"\" Define the shortcuts that the listner should listen to. If a shortcut is pressed the method on_shortcut_activate is called and the shortcut is passed to it. \"\"\" if ( len ( args ) == 0 ): if self . shortcutListner : self . onShortcutActivateArgument = [] self . shortcutListner . stop () return if ( addToExist == False ): argg = '{' for _ in range ( len ( args )): argg = argg + \"'\" + args [ _ ] + \"'\" + ':' + ' lambda self = self : self._on_shortcut_activate( {} )' . format ( \"'\" + args [ _ ] + \"'\" ) + ', ' argg = argg [: - 2 ] + '}' self . onShortcutActivateArgument = [] self . onShortcutActivateArgument . extend ( args ) elif ( addToExist == True ): args = list ( args ) args . extend ( self . onShortcutActivateArgument ) argg = '{' for _ in range ( len ( args )): argg = argg + \"'\" + args [ _ ] + \"'\" + ':' + ' lambda self = self : self._on_shortcut_activate( {} )' . format ( \"'\" + args [ _ ] + \"'\" ) + ', ' argg = argg [: - 2 ] + '}' self . onShortcutActivateArgument = [] self . onShortcutActivateArgument . extend ( args ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , '_define_shortcuts / args :' , args ) if self . shortcutListner : self . shortcutListner . stop () self . shortcutListner = keyboard . GlobalHotKeys ( eval ( argg )) self . shortcutListner . start () else : self . shortcutListner = keyboard . GlobalHotKeys ( eval ( argg )) self . shortcutListner . start () on_shortcut_activate ( m ) This method is called when a shortcut is pressed by the user. Source code in pro_110822\\mainwindow.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def on_shortcut_activate ( self , m ): \"\"\" This method is called when a shortcut is pressed by the user. \"\"\" print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'shortcut detected >>> { m } ' ) #Server shortcut if ( m == '<ctrl>+m+1' ): self . sendUserInput . supress_user_input ( False ) self . sendUserInput . send_input_to_client ( None ) else : #Client shortcut self . sendUserInput . supress_user_input ( True ) try : self . sendUserInput . send_input_to_client ( self . clientsConnections [ int ( m [ - 1 ]) - 2 ]) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , ex )","title":"Mainwindow"},{"location":"mainwindow.html#pro_110822.mainwindow.MainWindow","text":"Bases: QMainWindow Source code in pro_110822\\mainwindow.pyclass MainWindow ( QMainWindow ): def __init__ ( self , parent = None ) -> None : super ( MainWindow , self ) . __init__ ( parent ) #Program title self . setWindowTitle ( \"pro_110822\" ) #Main window resulotion self . setFixedSize ( 600 , 800 ) #Main window layout self . mainWidget = QtWidgets . QWidget () self . mainWidget . layout = QGridLayout () self . mainWidget . layout . setContentsMargins ( 0 , 0 , 0 , 0 ) self . mainWidget . layout . setSpacing ( 0 ) self . mainWidget . setLayout ( self . mainWidget . layout ) self . setCentralWidget ( self . mainWidget ) #Thread pool self . threabool = QThreadPool () self . threabool . setMaxThreadCount ( 20 ) #Start the program with ClientView self . mainWindowView = ClientView () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWindowView . makeServerButton . clicked . connect ( self . _create_server ) self . mainWindowView . refreshButton . clicked . connect ( self . _search_for_servers ) self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . pBar ) self . pbarValue = 0 #Variables used to handle connections self . clientsConnections = [] self . onShortcutActivateArgument = [] self . sendUserInput = SendUserInput () #Define server shortcut self . connectionID = 1 self . shortcutListner = False self . define_shortcuts ( '<ctrl>+m+' + str ( self . connectionID ), addToExist = False ) def on_shortcut_activate ( self , m ): \"\"\" This method is called when a shortcut is pressed by the user. \"\"\" print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'shortcut detected >>> { m } ' ) #Server shortcut if ( m == '<ctrl>+m+1' ): self . sendUserInput . supress_user_input ( False ) self . sendUserInput . send_input_to_client ( None ) else : #Client shortcut self . sendUserInput . supress_user_input ( True ) try : self . sendUserInput . send_input_to_client ( self . clientsConnections [ int ( m [ - 1 ]) - 2 ]) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , ex ) def define_shortcuts ( self , * args , addToExist = False ): \"\"\" Define the shortcuts that the listner should listen to. If a shortcut is pressed the method on_shortcut_activate is called and the shortcut is passed to it. \"\"\" if ( len ( args ) == 0 ): if self . shortcutListner : self . onShortcutActivateArgument = [] self . shortcutListner . stop () return if ( addToExist == False ): argg = '{' for _ in range ( len ( args )): argg = argg + \"'\" + args [ _ ] + \"'\" + ':' + ' lambda self = self : self._on_shortcut_activate( {} )' . format ( \"'\" + args [ _ ] + \"'\" ) + ', ' argg = argg [: - 2 ] + '}' self . onShortcutActivateArgument = [] self . onShortcutActivateArgument . extend ( args ) elif ( addToExist == True ): args = list ( args ) args . extend ( self . onShortcutActivateArgument ) argg = '{' for _ in range ( len ( args )): argg = argg + \"'\" + args [ _ ] + \"'\" + ':' + ' lambda self = self : self._on_shortcut_activate( {} )' . format ( \"'\" + args [ _ ] + \"'\" ) + ', ' argg = argg [: - 2 ] + '}' self . onShortcutActivateArgument = [] self . onShortcutActivateArgument . extend ( args ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , '_define_shortcuts / args :' , args ) if self . shortcutListner : self . shortcutListner . stop () self . shortcutListner = keyboard . GlobalHotKeys ( eval ( argg )) self . shortcutListner . start () else : self . shortcutListner = keyboard . GlobalHotKeys ( eval ( argg )) self . shortcutListner . start () def _search_for_servers ( self ): \"\"\" Starts the \"search for servers worker\" \"\"\" self . _reseat_p_bar () self . mainWindowView . availableServers . reseat () self . _update_p_bar ( 15 , \"Searching for servers.\" ) #Set the \"search for servers worker\" self . searchConntection = SearchForServersWorker ( 12345 ) #Connect the worker's connectionOkSignal signal to the function addServerToServersArea #The worker will send this signal to the main thread in case it manages to connect to a server on the local network self . searchConntection . signal . foundServer . connect ( self . _add_server ) #The worker will send this signal to the main thread to update the progress bar when it manages to connect to a server on the local network self . searchConntection . signal . pbarSignal . connect ( self . _update_p_bar ) #Start the woker self . threabool . start ( self . searchConntection ) def _add_server ( self , serverName : str , serverIP : str , serverPort : int ) -> None : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"emited from searchForServers : \" , serverName , serverIP ) serverWidget = ServerWidget ( serverName , serverIP ) self . mainWindowView . add_deivce ( serverWidget ) serverWidget . connectToServer . clicked . connect ( lambda : self . _establish_connection_to_server ( serverIP , serverPort )) def _establish_connection_to_server ( self , serverIP : str , serverPort : int ): self . reciveMouseMovement = ReciveUserInput ( serverIP , serverPort ) self . threabool . start ( self . reciveMouseMovement ) def _create_server ( self ): #Remove ClientView. self . mainWindowView . remove () self . pBar . remove () #Start ServerView. self . mainWindowView = ServerView () self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWidget . layout . addWidget ( self . pBar ) self . mainWindowView . stopServerButton . clicked . connect ( self . _close_server ) #Create the server socket self . serverSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . serverSocket . setblocking ( False ) self . serverSocket . bind (( '' , 12345 )) #Pass the server socket to ServerWorker self . serverWorker = ServerWorker ( self . serverSocket ) #Send clients requests to _handle_client_requests self . serverWorker . signal . clientRequest . connect ( self . _handle_client_requests ) self . threabool . start ( self . serverWorker ) #Start listning for user input self . sendUserInput . start_listning () def _handle_client_requests ( self , data : str ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Recived client request : \" , data ) try : if ( data . split ( '!' )[ 0 ] == 'C' ): #'C' stands for Connection requst #Connection requsts format \"C!CLIENT_SCREEN_W!CLIENT_SCREEN_H!CLIENT_PORT!CLIENT_NAME!CLIENT_IP\" CLIENT_SCREEN_W = data . split ( '!' )[ 1 ] CLIENT_SCREEN_H = data . split ( '!' )[ 2 ] CLIENT_PORT = data . split ( '!' )[ 3 ] CLIENT_NAME = data . split ( '!' )[ 4 ] CLIENT_IP = data . split ( '!' )[ 5 ] except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Exception raised while handling client requst. \\n Requst data: \\n {} \\n \\Exception: \\n {} \" . format ( data , ex )) self . _estaplish_connection_to_client (( CLIENT_SCREEN_W , CLIENT_SCREEN_H ), CLIENT_IP , CLIENT_PORT , CLIENT_NAME ) def _estaplish_connection_to_client ( self , clientScreenResolution : tuple , clientIP : str , clientPort : str , clientName : str ): #Define client shortcut self . connectionID = self . connectionID + 1 self . define_shortcuts ( '<ctrl>+m+' + str ( self . connectionID ), addToExist = True ) #Connect server to client self . clientsConnections . append ( socket . socket ( socket . AF_INET , socket . SOCK_STREAM )) try : self . clientsConnections [ - 1 ] . connect (( clientIP , int ( clientPort ))) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Exception raised while server trying to connect to client. \\n Server socket: {} \\n Cient IP: {} \\n Client Port: {} \\n\\n Exception: \\n {} \" . format ( self . clientsConnections [ - 1 ], clientIP , clientPort , ex )) #Add client widget to the UI self . _add_client_widget ( clientName , clientIP , self . clientsConnections [ - 1 ] . getsockname ()[ 1 ]) def _add_client_widget ( self , clientName , clientIP , clientPort ): client = ClientWidget ( clientName , clientIP , clientPort ) self . mainWindowView . add_client ( client ) def _close_server ( self ): #Terminate serverWorker, serverSocket and user-input listner self . serverWorker . alive = False self . serverSocket . close () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Server Socket terminated\" ) self . sendUserInput . stop_listning () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Input listner terminated\" ) #Remove ServerView and set the new view to ClientView self . mainWindowView . remove () self . pBar . remove () self . mainWindowView = ClientView () self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWidget . layout . addWidget ( self . pBar ) self . mainWindowView . makeServerButton . clicked . connect ( self . _create_server ) self . mainWindowView . refreshButton . clicked . connect ( self . _search_for_servers ) def _update_p_bar ( self , value , text ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , text ) if ( value == 999 ): self . _reseat_p_bar () else : self . pbarValue = self . pbarValue + value self . pBar . value ( self . pbarValue ) self . pBar . text ( text ) def _reseat_p_bar ( self ): self . pbarValue = 0 self . pBar . reseat ()","title":"MainWindow"},{"location":"mainwindow.html#pro_110822.mainwindow.MainWindow.define_shortcuts","text":"Define the shortcuts that the listner should listen to. If a shortcut is pressed the method on_shortcut_activate is called and the shortcut is passed to it. Source code in pro_110822\\mainwindow.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def define_shortcuts ( self , * args , addToExist = False ): \"\"\" Define the shortcuts that the listner should listen to. If a shortcut is pressed the method on_shortcut_activate is called and the shortcut is passed to it. \"\"\" if ( len ( args ) == 0 ): if self . shortcutListner : self . onShortcutActivateArgument = [] self . shortcutListner . stop () return if ( addToExist == False ): argg = '{' for _ in range ( len ( args )): argg = argg + \"'\" + args [ _ ] + \"'\" + ':' + ' lambda self = self : self._on_shortcut_activate( {} )' . format ( \"'\" + args [ _ ] + \"'\" ) + ', ' argg = argg [: - 2 ] + '}' self . onShortcutActivateArgument = [] self . onShortcutActivateArgument . extend ( args ) elif ( addToExist == True ): args = list ( args ) args . extend ( self . onShortcutActivateArgument ) argg = '{' for _ in range ( len ( args )): argg = argg + \"'\" + args [ _ ] + \"'\" + ':' + ' lambda self = self : self._on_shortcut_activate( {} )' . format ( \"'\" + args [ _ ] + \"'\" ) + ', ' argg = argg [: - 2 ] + '}' self . onShortcutActivateArgument = [] self . onShortcutActivateArgument . extend ( args ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , '_define_shortcuts / args :' , args ) if self . shortcutListner : self . shortcutListner . stop () self . shortcutListner = keyboard . GlobalHotKeys ( eval ( argg )) self . shortcutListner . start () else : self . shortcutListner = keyboard . GlobalHotKeys ( eval ( argg )) self . shortcutListner . start ()","title":"define_shortcuts()"},{"location":"mainwindow.html#pro_110822.mainwindow.MainWindow.on_shortcut_activate","text":"This method is called when a shortcut is pressed by the user. Source code in pro_110822\\mainwindow.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def on_shortcut_activate ( self , m ): \"\"\" This method is called when a shortcut is pressed by the user. \"\"\" print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'shortcut detected >>> { m } ' ) #Server shortcut if ( m == '<ctrl>+m+1' ): self . sendUserInput . supress_user_input ( False ) self . sendUserInput . send_input_to_client ( None ) else : #Client shortcut self . sendUserInput . supress_user_input ( True ) try : self . sendUserInput . send_input_to_client ( self . clientsConnections [ int ( m [ - 1 ]) - 2 ]) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , ex )","title":"on_shortcut_activate()"},{"location":"senduserinput.html","text":"Send mouse and keyboard input over a socket connection. CLASS SendUserInput constins the following methods __init__ get_screen_resulotion _on_move _on_click _on_scroll _on_press _on_release _keyboard_win32_event_filter _mouse_win32_event_filter supress_user_input start_listning stop_listning send_input_to_client SendUserInput Source code in pro_110822\\senduserinput.pyclass SendUserInput (): def __init__ ( self ): self . activeConnection = None self . mouseListner = None self . keyboardListner = None self . activeWin32Filter = False self . screenCovered = False self . coverScreenProcess = None self . screenWidth = self . get_screen_resulotion ()[ 0 ] self . screenHight = self . get_screen_resulotion ()[ 1 ] def get_screen_resulotion ( self ): user32 = ctypes . windll . user32 screensize = user32 . GetSystemMetrics ( 0 ), user32 . GetSystemMetrics ( 1 ) return screensize @if_connected def _on_move ( self , x , y ): message = f 'M! { x / self . screenWidth } ! { y / self . screenHight } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_click ( self , x , y , button , pressed ): if pressed : message = f 'P! { button } !1! { x } ! { y } ' else : message = f 'P! { button } !0! { x } ! { y } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_scroll ( self , x , y , dx , dy ): if dy < 0 : message = f 'S!d! { x } ! { y } ' else : message = f 'S!u! { x } ! { y } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_press ( self , key ): if ( str ( key )[ 0 : 3 ] == 'Key' ): pass else : key = self . keyboardListner . canonical ( key ) try : message = f 'K!a! { key . char } ' except AttributeError : message = f 'K!s! { key } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_release ( self , key ): if ( str ( key )[ 0 : 3 ] == 'Key' ): pass else : key = self . keyboardListner . canonical ( key ) message = f 'R! { key } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) def _keyboard_win32_event_filter ( self , msg , data ): if ( self . activeWin32Filter ): self . keyboardListner . _suppress = True else : self . keyboardListner . _suppress = False def _mouse_win32_event_filter ( self , msg , data ): if ( self . activeWin32Filter ): if ( msg == 513 or msg == 514 or msg == 516 or msg == 517 or msg == 519 or msg == 520 or msg == 522 ): self . mouseListner . _suppress = True else : self . mouseListner . _suppress = False else : self . mouseListner . _suppress = False def supress_user_input ( self , supress : bool ): \"\"\" Calling this method will disable the mouse and keyboard input. \"\"\" if ( supress == True and self . screenCovered == False ): self . coverScreenProcess = subprocess . Popen ([ \"py\" , \"-m\" , \"coverscreenalpha.py\" ]) self . screenCovered = True self . activeWin32Filter = True elif ( supress == False ): self . activeWin32Filter = False if ( self . screenCovered ): self . coverScreenProcess . terminate () self . screenCovered = False def start_listning ( self ): \"\"\" Start listning to the mouse and keyboard input. To send the input to a socket call the method send_input_to_client and provide a valid socket connection as an argument. \"\"\" self . mouseListner = mouse . Listener ( on_move = self . _on_move , on_click = self . _on_click , on_scroll = self . _on_scroll , win32_event_filter = self . _mouse_win32_event_filter , suppress = False ) self . keyboardListner = keyboard . Listener ( on_press = self . _on_press , on_release = self . _on_release , win32_event_filter = self . _keyboard_win32_event_filter , suppress = False ) self . mouseListner . start () self . keyboardListner . start () def stop_listning ( self ): \"\"\" Stop listning to the mouse and keyboard input. \"\"\" self . supress_user_input ( False ) self . mouseListner . stop () self . keyboardListner . stop () self . activeConnection = None print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"LISTNINGSTOPED\" ) def send_input_to_client ( self , clientSocket ) -> None : self . activeConnection = clientSocket start_listning () Start listning to the mouse and keyboard input. To send the input to a socket call the method send_input_to_client and provide a valid socket connection as an argument. Source code in pro_110822\\senduserinput.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def start_listning ( self ): \"\"\" Start listning to the mouse and keyboard input. To send the input to a socket call the method send_input_to_client and provide a valid socket connection as an argument. \"\"\" self . mouseListner = mouse . Listener ( on_move = self . _on_move , on_click = self . _on_click , on_scroll = self . _on_scroll , win32_event_filter = self . _mouse_win32_event_filter , suppress = False ) self . keyboardListner = keyboard . Listener ( on_press = self . _on_press , on_release = self . _on_release , win32_event_filter = self . _keyboard_win32_event_filter , suppress = False ) self . mouseListner . start () self . keyboardListner . start () stop_listning () Stop listning to the mouse and keyboard input. Source code in pro_110822\\senduserinput.py 182 183 184 185 186 187 188 189 190 def stop_listning ( self ): \"\"\" Stop listning to the mouse and keyboard input. \"\"\" self . supress_user_input ( False ) self . mouseListner . stop () self . keyboardListner . stop () self . activeConnection = None print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"LISTNINGSTOPED\" ) supress_user_input ( supress ) Calling this method will disable the mouse and keyboard input. Source code in pro_110822\\senduserinput.py 144 145 146 147 148 149 150 151 152 153 154 155 156 def supress_user_input ( self , supress : bool ): \"\"\" Calling this method will disable the mouse and keyboard input. \"\"\" if ( supress == True and self . screenCovered == False ): self . coverScreenProcess = subprocess . Popen ([ \"py\" , \"-m\" , \"coverscreenalpha.py\" ]) self . screenCovered = True self . activeWin32Filter = True elif ( supress == False ): self . activeWin32Filter = False if ( self . screenCovered ): self . coverScreenProcess . terminate () self . screenCovered = False if_connected ( func ) A wrapper to some of the SendUserInput methods. The wrapper checks if a valid connection is established before calling the wrapped function. Source code in pro_110822\\senduserinput.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def if_connected ( func ): \"\"\" A wrapper to some of the SendUserInput methods. The wrapper checks if a valid connection is established before calling the wrapped function. \"\"\" @functools . wraps ( func ) def _wrapper ( self , * args , ** kwargs ): if (( self . mouseListner . is_alive () or self . keyboardListner . is_alive ()) and self . activeConnection ): try : func ( self , * args , ** kwargs ) except socket . error as error : if ( error . errno == 10054 ): #[WinError 10054] An existing connection was forcibly closed by the remote host self . stop_listning () return except Exception as ex : print ( ex ) return _wrapper","title":"Senduserinput"},{"location":"senduserinput.html#pro_110822.senduserinput.SendUserInput","text":"Source code in pro_110822\\senduserinput.pyclass SendUserInput (): def __init__ ( self ): self . activeConnection = None self . mouseListner = None self . keyboardListner = None self . activeWin32Filter = False self . screenCovered = False self . coverScreenProcess = None self . screenWidth = self . get_screen_resulotion ()[ 0 ] self . screenHight = self . get_screen_resulotion ()[ 1 ] def get_screen_resulotion ( self ): user32 = ctypes . windll . user32 screensize = user32 . GetSystemMetrics ( 0 ), user32 . GetSystemMetrics ( 1 ) return screensize @if_connected def _on_move ( self , x , y ): message = f 'M! { x / self . screenWidth } ! { y / self . screenHight } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_click ( self , x , y , button , pressed ): if pressed : message = f 'P! { button } !1! { x } ! { y } ' else : message = f 'P! { button } !0! { x } ! { y } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_scroll ( self , x , y , dx , dy ): if dy < 0 : message = f 'S!d! { x } ! { y } ' else : message = f 'S!u! { x } ! { y } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_press ( self , key ): if ( str ( key )[ 0 : 3 ] == 'Key' ): pass else : key = self . keyboardListner . canonical ( key ) try : message = f 'K!a! { key . char } ' except AttributeError : message = f 'K!s! { key } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_release ( self , key ): if ( str ( key )[ 0 : 3 ] == 'Key' ): pass else : key = self . keyboardListner . canonical ( key ) message = f 'R! { key } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) def _keyboard_win32_event_filter ( self , msg , data ): if ( self . activeWin32Filter ): self . keyboardListner . _suppress = True else : self . keyboardListner . _suppress = False def _mouse_win32_event_filter ( self , msg , data ): if ( self . activeWin32Filter ): if ( msg == 513 or msg == 514 or msg == 516 or msg == 517 or msg == 519 or msg == 520 or msg == 522 ): self . mouseListner . _suppress = True else : self . mouseListner . _suppress = False else : self . mouseListner . _suppress = False def supress_user_input ( self , supress : bool ): \"\"\" Calling this method will disable the mouse and keyboard input. \"\"\" if ( supress == True and self . screenCovered == False ): self . coverScreenProcess = subprocess . Popen ([ \"py\" , \"-m\" , \"coverscreenalpha.py\" ]) self . screenCovered = True self . activeWin32Filter = True elif ( supress == False ): self . activeWin32Filter = False if ( self . screenCovered ): self . coverScreenProcess . terminate () self . screenCovered = False def start_listning ( self ): \"\"\" Start listning to the mouse and keyboard input. To send the input to a socket call the method send_input_to_client and provide a valid socket connection as an argument. \"\"\" self . mouseListner = mouse . Listener ( on_move = self . _on_move , on_click = self . _on_click , on_scroll = self . _on_scroll , win32_event_filter = self . _mouse_win32_event_filter , suppress = False ) self . keyboardListner = keyboard . Listener ( on_press = self . _on_press , on_release = self . _on_release , win32_event_filter = self . _keyboard_win32_event_filter , suppress = False ) self . mouseListner . start () self . keyboardListner . start () def stop_listning ( self ): \"\"\" Stop listning to the mouse and keyboard input. \"\"\" self . supress_user_input ( False ) self . mouseListner . stop () self . keyboardListner . stop () self . activeConnection = None print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"LISTNINGSTOPED\" ) def send_input_to_client ( self , clientSocket ) -> None : self . activeConnection = clientSocket","title":"SendUserInput"},{"location":"senduserinput.html#pro_110822.senduserinput.SendUserInput.start_listning","text":"Start listning to the mouse and keyboard input. To send the input to a socket call the method send_input_to_client and provide a valid socket connection as an argument. Source code in pro_110822\\senduserinput.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def start_listning ( self ): \"\"\" Start listning to the mouse and keyboard input. To send the input to a socket call the method send_input_to_client and provide a valid socket connection as an argument. \"\"\" self . mouseListner = mouse . Listener ( on_move = self . _on_move , on_click = self . _on_click , on_scroll = self . _on_scroll , win32_event_filter = self . _mouse_win32_event_filter , suppress = False ) self . keyboardListner = keyboard . Listener ( on_press = self . _on_press , on_release = self . _on_release , win32_event_filter = self . _keyboard_win32_event_filter , suppress = False ) self . mouseListner . start () self . keyboardListner . start ()","title":"start_listning()"},{"location":"senduserinput.html#pro_110822.senduserinput.SendUserInput.stop_listning","text":"Stop listning to the mouse and keyboard input. Source code in pro_110822\\senduserinput.py 182 183 184 185 186 187 188 189 190 def stop_listning ( self ): \"\"\" Stop listning to the mouse and keyboard input. \"\"\" self . supress_user_input ( False ) self . mouseListner . stop () self . keyboardListner . stop () self . activeConnection = None print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"LISTNINGSTOPED\" )","title":"stop_listning()"},{"location":"senduserinput.html#pro_110822.senduserinput.SendUserInput.supress_user_input","text":"Calling this method will disable the mouse and keyboard input. Source code in pro_110822\\senduserinput.py 144 145 146 147 148 149 150 151 152 153 154 155 156 def supress_user_input ( self , supress : bool ): \"\"\" Calling this method will disable the mouse and keyboard input. \"\"\" if ( supress == True and self . screenCovered == False ): self . coverScreenProcess = subprocess . Popen ([ \"py\" , \"-m\" , \"coverscreenalpha.py\" ]) self . screenCovered = True self . activeWin32Filter = True elif ( supress == False ): self . activeWin32Filter = False if ( self . screenCovered ): self . coverScreenProcess . terminate () self . screenCovered = False","title":"supress_user_input()"},{"location":"senduserinput.html#pro_110822.senduserinput.if_connected","text":"A wrapper to some of the SendUserInput methods. The wrapper checks if a valid connection is established before calling the wrapped function. Source code in pro_110822\\senduserinput.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def if_connected ( func ): \"\"\" A wrapper to some of the SendUserInput methods. The wrapper checks if a valid connection is established before calling the wrapped function. \"\"\" @functools . wraps ( func ) def _wrapper ( self , * args , ** kwargs ): if (( self . mouseListner . is_alive () or self . keyboardListner . is_alive ()) and self . activeConnection ): try : func ( self , * args , ** kwargs ) except socket . error as error : if ( error . errno == 10054 ): #[WinError 10054] An existing connection was forcibly closed by the remote host self . stop_listning () return except Exception as ex : print ( ex ) return _wrapper","title":"if_connected()"},{"location":"tests.html","text":"","title":"Tests"}]}