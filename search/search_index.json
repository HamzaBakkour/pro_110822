{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the documentation of Pro_110822 Pro_110822 allows you to control several computers through one keyboard and mouse. Please check the Public interface tap for the documntation of the public methods in this project (Not completed) or visit The project's repository for the source code.","title":"Overview"},{"location":"index.html#welcome-to-the-documentation-of-pro_110822","text":"Pro_110822 allows you to control several computers through one keyboard and mouse. Please check the Public interface tap for the documntation of the public methods in this project (Not completed) or visit The project's repository for the source code.","title":"Welcome to the documentation of Pro_110822"},{"location":"index.html#_1","text":"","title":""},{"location":"index.html#_2","text":"","title":""},{"location":"index.html#_3","text":"","title":""},{"location":"index.html#_4","text":"","title":""},{"location":"index.html#_5","text":"","title":""},{"location":"index.html#_6","text":"","title":""},{"location":"index.html#_7","text":"","title":""},{"location":"index.html#_8","text":"","title":""},{"location":"index.html#_9","text":"","title":""},{"location":"index.html#_10","text":"","title":""},{"location":"licence.html","text":"","title":"Licence"},{"location":"mainwindow.html","text":"The programs main window module CLASS MainWindow contains the following methods __init__ on_shortcut_activate define_shortcuts _search_for_servers _add_server _establish_connection_to_server _create_server _handle_client_requests _estaplish_connection_to_client _add_client_widget _close_server _remove_client_widget _update_p_bar _reseat_p_bar MainWindow Bases: QMainWindow Source code in pro_110822\\mainwindow.pyclass MainWindow ( QMainWindow ): def __init__ ( self , parent = None ) -> None : super ( MainWindow , self ) . __init__ ( parent ) #Program title self . setWindowTitle ( \"pro_110822\" ) #Main window resulotion self . setFixedSize ( 600 , 800 ) #Main window layout self . mainWidget = QtWidgets . QWidget () self . mainWidget . layout = QGridLayout () self . mainWidget . layout . setContentsMargins ( 0 , 0 , 0 , 0 ) self . mainWidget . layout . setSpacing ( 0 ) self . mainWidget . setLayout ( self . mainWidget . layout ) self . setCentralWidget ( self . mainWidget ) #Thread pool self . threabool = QThreadPool () self . threabool . setMaxThreadCount ( 20 ) #Start the program with ClientView self . mainWindowView = ClientView () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWindowView . makeServerButton . clicked . connect ( self . _create_server ) self . mainWindowView . refreshButton . clicked . connect ( self . _search_for_servers ) self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . pBar ) self . pbarValue = 0 #Variables used to handle connections self . clientsConnections = [] self . clientWidgets = [] self . serverWidget = None self . connectionsMonitor = ConnectionsMonitor ( self . clientsConnections ) self . connectionsMonitor . signal . socketError . connect ( self . _remove_client_widget ) self . connectionID = 1 self . sendUserInput = SendUserInput () self . sendUserInput . signal . socketTerminated . connect ( self . _remove_client_widget ) self . shortcutHandle = ShortcutsHandle ( self ) self . shortcutHandle . define_shortcut (( '<ctrl>+m+1' , '_unsupress_user_input' ), addToExist = False , passShortcut = False ) def _search_for_servers ( self ): \"\"\" Starts the \"search for servers worker\" \"\"\" self . _reseat_p_bar () self . mainWindowView . availableServers . reseat () self . _update_p_bar ( 15 , \"Searching for servers.\" ) #Set the \"search for servers worker\" self . searchConntection = SearchForServersWorker ( 12345 ) #Connect the worker's connectionOkSignal signal to the function addServerToServersArea #The worker will send this signal to the main thread in case it manages to connect to a server on the local network self . searchConntection . signal . foundServer . connect ( self . _add_server ) #The worker will send this signal to the main thread to update the progress bar when it manages to connect to a server on the local network self . searchConntection . signal . pbarSignal . connect ( self . _update_p_bar ) #Start the woker self . threabool . start ( self . searchConntection ) def _add_server ( self , serverName : str , serverIP : str , serverPort : int ) -> None : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"emited from searchForServers : \" , serverName , serverIP ) self . serverWidget = ServerWidget ( serverName , serverIP ) self . mainWindowView . add_deivce ( self . serverWidget ) self . serverWidget . connectToServer . clicked . connect ( lambda : self . _establish_connection_to_server ( serverIP , serverPort )) def _establish_connection_to_server ( self , serverIP : str , serverPort : int ): if self . serverWidget . connectToServer . isChecked (): self . serverWidget . connectToServer . setText ( 'Disconnect' ) self . reciveMouseMovement = ReciveUserInput ( serverIP , serverPort ) self . threabool . start ( self . reciveMouseMovement ) else : self . serverWidget . connectToServer . setText ( 'Connect' ) self . reciveMouseMovement . alive = False def _create_server ( self ): #Remove ClientView. self . mainWindowView . remove () self . pBar . remove () #Start ServerView. self . mainWindowView = ServerView () self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWidget . layout . addWidget ( self . pBar ) self . mainWindowView . stopServerButton . clicked . connect ( self . _close_server ) #Create the server socket self . serverSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . serverSocket . setblocking ( False ) self . serverSocket . bind (( '' , 12345 )) #Pass the server socket to ServerWorker self . serverWorker = ServerWorker ( self . serverSocket ) #Send clients requests to _handle_client_requests self . serverWorker . signal . clientRequest . connect ( self . _handle_client_requests ) self . threabool . start ( self . serverWorker ) self . threabool . start ( self . connectionsMonitor ) #Start listning for user input self . sendUserInput . start_listning () def _handle_client_requests ( self , data : str ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Recived client request : \" , data ) try : if ( data . split ( '!' )[ 0 ] == 'C' ): #'C' stands for Connection requst #Connection requsts format \"C!CLIENT_SCREEN_W!CLIENT_SCREEN_H!CLIENT_PORT!CLIENT_NAME!CLIENT_IP\" CLIENT_SCREEN_W = data . split ( '!' )[ 1 ] CLIENT_SCREEN_H = data . split ( '!' )[ 2 ] CLIENT_PORT = data . split ( '!' )[ 3 ] CLIENT_NAME = data . split ( '!' )[ 4 ] CLIENT_IP = data . split ( '!' )[ 5 ] except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Exception raised while handling client requst. \\n Requst data: \\n {} \\n \\Exception: \\n {} \" . format ( data , ex )) self . _estaplish_connection_to_client (( CLIENT_SCREEN_W , CLIENT_SCREEN_H ), CLIENT_IP , CLIENT_PORT , CLIENT_NAME ) def _estaplish_connection_to_client ( self , clientScreenResolution : tuple , clientIP : str , clientPort : str , clientName : str ): #Define client shortcut self . connectionID = self . connectionID + 1 shortcut = '<ctrl>+m+' + str ( self . connectionID ) self . shortcutHandle . define_shortcut (( shortcut , '_switch_input_to_client' ), addToExist = True , passShortcut = True ) #Connect server to client self . clientsConnections . append (( socket . socket ( socket . AF_INET , socket . SOCK_STREAM ), self . connectionID )) try : self . clientsConnections [ - 1 ][ 0 ] . connect (( clientIP , int ( clientPort ))) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Exception raised while server trying to connect to client. \\n Server socket: {} \\n Cient IP: {} \\n Client Port: {} \\n\\n Exception: \\n {} \" . format ( self . clientsConnections [ - 1 ], clientIP , clientPort , ex )) #Monitor the connection self . connectionsMonitor . connectionsList = self . clientsConnections #Add client widget to the UI self . _add_client_widget ( clientName , clientIP , self . clientsConnections [ - 1 ][ 0 ] . getsockname ()[ 1 ], shortcut ) def _unsupress_user_input ( self ): self . sendUserInput . supress_user_input ( False ) self . sendUserInput . send_input_to_client ( None ) def _switch_input_to_client ( self , shortcutPressed ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , '_switch_input_to_client' ) self . sendUserInput . supress_user_input ( True ) try : self . sendUserInput . send_input_to_client ( self . clientsConnections [ int ( shortcutPressed [ - 1 ]) - 2 ][ 0 ]) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exception raisde { ex } ' ) def _add_client_widget ( self , clientName , clientIP , clientPort , shortcut ): self . clientWidgets . append ( ClientWidget ( clientName , clientIP , clientPort , shortcut )) self . mainWindowView . add_client ( self . clientWidgets [ - 1 ]) def _close_server ( self ): #Terminate serverWorker, serverSocket and user-input listner self . serverWorker . alive = False self . serverSocket . close () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Server Socket terminated\" ) self . sendUserInput . stop_listning () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Input listner terminated\" ) self . connectionsMonitor . alive = False #Remove ServerView and set the new view to ClientView self . mainWindowView . remove () self . pBar . remove () self . mainWindowView = ClientView () self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWidget . layout . addWidget ( self . pBar ) self . mainWindowView . makeServerButton . clicked . connect ( self . _create_server ) self . mainWindowView . refreshButton . clicked . connect ( self . _search_for_servers ) def _remove_client_widget ( self , socketPort ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Client socket terminated { socketPort } ' ) for widget in self . clientWidgets : if ( widget . port == socketPort ): widget . deleteLater () self . shortcutHandle . remove_shortcut ( widget . shortcut ) def _update_p_bar ( self , value , text ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , text ) if ( value == 999 ): self . _reseat_p_bar () else : self . pbarValue = self . pbarValue + value self . pBar . value ( self . pbarValue ) self . pBar . text ( text ) def _reseat_p_bar ( self ): self . pbarValue = 0 self . pBar . reseat ()","title":"Mainwindow"},{"location":"mainwindow.html#pro_110822.mainwindow.MainWindow","text":"Bases: QMainWindow Source code in pro_110822\\mainwindow.pyclass MainWindow ( QMainWindow ): def __init__ ( self , parent = None ) -> None : super ( MainWindow , self ) . __init__ ( parent ) #Program title self . setWindowTitle ( \"pro_110822\" ) #Main window resulotion self . setFixedSize ( 600 , 800 ) #Main window layout self . mainWidget = QtWidgets . QWidget () self . mainWidget . layout = QGridLayout () self . mainWidget . layout . setContentsMargins ( 0 , 0 , 0 , 0 ) self . mainWidget . layout . setSpacing ( 0 ) self . mainWidget . setLayout ( self . mainWidget . layout ) self . setCentralWidget ( self . mainWidget ) #Thread pool self . threabool = QThreadPool () self . threabool . setMaxThreadCount ( 20 ) #Start the program with ClientView self . mainWindowView = ClientView () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWindowView . makeServerButton . clicked . connect ( self . _create_server ) self . mainWindowView . refreshButton . clicked . connect ( self . _search_for_servers ) self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . pBar ) self . pbarValue = 0 #Variables used to handle connections self . clientsConnections = [] self . clientWidgets = [] self . serverWidget = None self . connectionsMonitor = ConnectionsMonitor ( self . clientsConnections ) self . connectionsMonitor . signal . socketError . connect ( self . _remove_client_widget ) self . connectionID = 1 self . sendUserInput = SendUserInput () self . sendUserInput . signal . socketTerminated . connect ( self . _remove_client_widget ) self . shortcutHandle = ShortcutsHandle ( self ) self . shortcutHandle . define_shortcut (( '<ctrl>+m+1' , '_unsupress_user_input' ), addToExist = False , passShortcut = False ) def _search_for_servers ( self ): \"\"\" Starts the \"search for servers worker\" \"\"\" self . _reseat_p_bar () self . mainWindowView . availableServers . reseat () self . _update_p_bar ( 15 , \"Searching for servers.\" ) #Set the \"search for servers worker\" self . searchConntection = SearchForServersWorker ( 12345 ) #Connect the worker's connectionOkSignal signal to the function addServerToServersArea #The worker will send this signal to the main thread in case it manages to connect to a server on the local network self . searchConntection . signal . foundServer . connect ( self . _add_server ) #The worker will send this signal to the main thread to update the progress bar when it manages to connect to a server on the local network self . searchConntection . signal . pbarSignal . connect ( self . _update_p_bar ) #Start the woker self . threabool . start ( self . searchConntection ) def _add_server ( self , serverName : str , serverIP : str , serverPort : int ) -> None : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"emited from searchForServers : \" , serverName , serverIP ) self . serverWidget = ServerWidget ( serverName , serverIP ) self . mainWindowView . add_deivce ( self . serverWidget ) self . serverWidget . connectToServer . clicked . connect ( lambda : self . _establish_connection_to_server ( serverIP , serverPort )) def _establish_connection_to_server ( self , serverIP : str , serverPort : int ): if self . serverWidget . connectToServer . isChecked (): self . serverWidget . connectToServer . setText ( 'Disconnect' ) self . reciveMouseMovement = ReciveUserInput ( serverIP , serverPort ) self . threabool . start ( self . reciveMouseMovement ) else : self . serverWidget . connectToServer . setText ( 'Connect' ) self . reciveMouseMovement . alive = False def _create_server ( self ): #Remove ClientView. self . mainWindowView . remove () self . pBar . remove () #Start ServerView. self . mainWindowView = ServerView () self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWidget . layout . addWidget ( self . pBar ) self . mainWindowView . stopServerButton . clicked . connect ( self . _close_server ) #Create the server socket self . serverSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . serverSocket . setblocking ( False ) self . serverSocket . bind (( '' , 12345 )) #Pass the server socket to ServerWorker self . serverWorker = ServerWorker ( self . serverSocket ) #Send clients requests to _handle_client_requests self . serverWorker . signal . clientRequest . connect ( self . _handle_client_requests ) self . threabool . start ( self . serverWorker ) self . threabool . start ( self . connectionsMonitor ) #Start listning for user input self . sendUserInput . start_listning () def _handle_client_requests ( self , data : str ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Recived client request : \" , data ) try : if ( data . split ( '!' )[ 0 ] == 'C' ): #'C' stands for Connection requst #Connection requsts format \"C!CLIENT_SCREEN_W!CLIENT_SCREEN_H!CLIENT_PORT!CLIENT_NAME!CLIENT_IP\" CLIENT_SCREEN_W = data . split ( '!' )[ 1 ] CLIENT_SCREEN_H = data . split ( '!' )[ 2 ] CLIENT_PORT = data . split ( '!' )[ 3 ] CLIENT_NAME = data . split ( '!' )[ 4 ] CLIENT_IP = data . split ( '!' )[ 5 ] except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Exception raised while handling client requst. \\n Requst data: \\n {} \\n \\Exception: \\n {} \" . format ( data , ex )) self . _estaplish_connection_to_client (( CLIENT_SCREEN_W , CLIENT_SCREEN_H ), CLIENT_IP , CLIENT_PORT , CLIENT_NAME ) def _estaplish_connection_to_client ( self , clientScreenResolution : tuple , clientIP : str , clientPort : str , clientName : str ): #Define client shortcut self . connectionID = self . connectionID + 1 shortcut = '<ctrl>+m+' + str ( self . connectionID ) self . shortcutHandle . define_shortcut (( shortcut , '_switch_input_to_client' ), addToExist = True , passShortcut = True ) #Connect server to client self . clientsConnections . append (( socket . socket ( socket . AF_INET , socket . SOCK_STREAM ), self . connectionID )) try : self . clientsConnections [ - 1 ][ 0 ] . connect (( clientIP , int ( clientPort ))) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Exception raised while server trying to connect to client. \\n Server socket: {} \\n Cient IP: {} \\n Client Port: {} \\n\\n Exception: \\n {} \" . format ( self . clientsConnections [ - 1 ], clientIP , clientPort , ex )) #Monitor the connection self . connectionsMonitor . connectionsList = self . clientsConnections #Add client widget to the UI self . _add_client_widget ( clientName , clientIP , self . clientsConnections [ - 1 ][ 0 ] . getsockname ()[ 1 ], shortcut ) def _unsupress_user_input ( self ): self . sendUserInput . supress_user_input ( False ) self . sendUserInput . send_input_to_client ( None ) def _switch_input_to_client ( self , shortcutPressed ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , '_switch_input_to_client' ) self . sendUserInput . supress_user_input ( True ) try : self . sendUserInput . send_input_to_client ( self . clientsConnections [ int ( shortcutPressed [ - 1 ]) - 2 ][ 0 ]) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exception raisde { ex } ' ) def _add_client_widget ( self , clientName , clientIP , clientPort , shortcut ): self . clientWidgets . append ( ClientWidget ( clientName , clientIP , clientPort , shortcut )) self . mainWindowView . add_client ( self . clientWidgets [ - 1 ]) def _close_server ( self ): #Terminate serverWorker, serverSocket and user-input listner self . serverWorker . alive = False self . serverSocket . close () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Server Socket terminated\" ) self . sendUserInput . stop_listning () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"Input listner terminated\" ) self . connectionsMonitor . alive = False #Remove ServerView and set the new view to ClientView self . mainWindowView . remove () self . pBar . remove () self . mainWindowView = ClientView () self . pBar = ProgressBar () self . mainWidget . layout . addWidget ( self . mainWindowView ) self . mainWidget . layout . addWidget ( self . pBar ) self . mainWindowView . makeServerButton . clicked . connect ( self . _create_server ) self . mainWindowView . refreshButton . clicked . connect ( self . _search_for_servers ) def _remove_client_widget ( self , socketPort ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Client socket terminated { socketPort } ' ) for widget in self . clientWidgets : if ( widget . port == socketPort ): widget . deleteLater () self . shortcutHandle . remove_shortcut ( widget . shortcut ) def _update_p_bar ( self , value , text ): print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , text ) if ( value == 999 ): self . _reseat_p_bar () else : self . pbarValue = self . pbarValue + value self . pBar . value ( self . pbarValue ) self . pBar . text ( text ) def _reseat_p_bar ( self ): self . pbarValue = 0 self . pBar . reseat ()","title":"MainWindow"},{"location":"reciveuserinput.html","text":"Recive mouse and keyboard input. CALSS ReciveUserInput contains the following methods __init__ on_shortcut_activate get_screen_resulotion get_pc_name _receive_n_bytes run ReciveUserInput Bases: QRunnable Source code in pro_110822\\reciveuserinput.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 class ReciveUserInput ( QRunnable ): def __init__ ( self , serverIP : str , serverPort : str ) -> None : super ( ReciveUserInput , self ) . __init__ () self . serverIP = serverIP self . serverPort = int ( serverPort ) self . alive = True self . sendSocket = None self . reciveSocket = None self . data = None def get_screen_resulotion ( self ) -> tuple [ int , int ]: \"\"\" Get the screen width and hight. Args: None Returns: tuple[secreen width, screen hight] \"\"\" user32 = ctypes . windll . user32 screensize = user32 . GetSystemMetrics ( 0 ), user32 . GetSystemMetrics ( 1 ) return screensize def get_pc_name ( self ) -> str : \"\"\" Get the PC name. Args: None Returns: None \"\"\" return platform . node () def _receive_n_bytes ( self , n ): \"\"\" Receiving exactly n bytes from socket connection (assuming it's open and connected). \"\"\" data = '' . encode () while len ( data ) < n : chunk = self . conn . recv ( n - len ( data )) if (( chunk == '' . encode ())): break data += chunk return data @Slot () def run ( self ) -> None : \"\"\" The QRunnable run method. This method will be called when the QRunnable is started. Args: None Returns: None \"\"\" #sendSocket is used to send client info to the server. self . sendSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #reciveSocket is used to recive mouse and keyboard input. self . reciveSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . reciveSocket . bind (( '' , 0 )) self . reciveSocket . setblocking ( 0 ) self . sendSocket . connect (( self . serverIP , self . serverPort )) screenRez = self . get_screen_resulotion () receiveSocetPort = self . reciveSocket . getsockname ()[ 1 ] message = \"C! {} ! {} ! {} ! {} \" . format ( screenRez [ 0 ], screenRez [ 1 ], receiveSocetPort , self . get_pc_name ()) message = message . encode () header = struct . pack ( '<L' , len ( message )) try : self . sendSocket . sendall ( header + message ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f 'Exception raisde { ex } ' ) self . reciveSocket . listen ( 5 ) while ( True ): try : self . conn , address = self . reciveSocket . accept () print ( \"from receive worker accepted {} {} \" . format ( self . conn , address )) break except BlockingIOError : pass mouse = MC () keyboard = KC () while ( self . alive ): try : headerData = self . _receive_n_bytes ( 4 ) if ( len ( headerData ) == 4 ): dataLen = struct . unpack ( '<L' , headerData )[ 0 ] self . data = self . _receive_n_bytes ( dataLen ) if len ( self . data ) == dataLen : self . data = self . data . decode () if ( self . data . split ( '!' )[ 0 ] == 'M' ): #Mouse position mouse . position = ( int (( float ( self . data . split ( '!' )[ 1 ]) * screenRez [ 0 ])), int (( float ( self . data . split ( '!' )[ 2 ]) * screenRez [ 1 ]))) elif ( self . data . split ( '!' )[ 0 ] == 'P' ): #Mouse button if ( self . data . split ( '!' )[ 2 ] == '1' ): #Mouse button pressed mouse . press ( eval ( self . data . split ( '!' )[ 1 ])) elif ( self . data . split ( '!' )[ 2 ] == '0' ): #Mouse button released mouse . release ( eval ( self . data . split ( '!' )[ 1 ])) elif ( self . data . split ( '!' )[ 0 ] == 'K' ): #Keyboard button try : if ( self . data [ 4 : 7 ] == 'Key' ): #Keyboard button pressed keyboard . press ( eval ( self . data . split ( '!' )[ 2 ])) else : keyboard . press ( self . data . split ( '!' )[ 2 ]) except Exception as ex : print ( ex ) elif ( self . data . split ( '!' )[ 0 ] == 'R' ): #Keyboard button released try : keyboard . release ( eval ( self . data . split ( '!' )[ 1 ])) except Exception as ex : print ( ex ) else : print ( \"Header data value is not equal to received data length\" ) except UnboundLocalError : pass except BlockingIOError : pass except IOError : pass self . conn . close () self . sendSocket . close () self . reciveSocket . close () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , '---- | ' , \"ReciveUserInput QRunnable terminated\" ) get_pc_name () Get the PC name. Returns: Type Description str None Source code in pro_110822\\reciveuserinput.py 52 53 54 55 56 57 58 59 60 61 62 def get_pc_name ( self ) -> str : \"\"\" Get the PC name. Args: None Returns: None \"\"\" return platform . node () get_screen_resulotion () Get the screen width and hight. Returns: Type Description tuple [ int , int ] tuple[secreen width, screen hight] Source code in pro_110822\\reciveuserinput.py 37 38 39 40 41 42 43 44 45 46 47 48 49 def get_screen_resulotion ( self ) -> tuple [ int , int ]: \"\"\" Get the screen width and hight. Args: None Returns: tuple[secreen width, screen hight] \"\"\" user32 = ctypes . windll . user32 screensize = user32 . GetSystemMetrics ( 0 ), user32 . GetSystemMetrics ( 1 ) return screensize run () The QRunnable run method. This method will be called when the QRunnable is started. Returns: Type Description None None Source code in pro_110822\\reciveuserinput.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 @Slot () def run ( self ) -> None : \"\"\" The QRunnable run method. This method will be called when the QRunnable is started. Args: None Returns: None \"\"\" #sendSocket is used to send client info to the server. self . sendSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #reciveSocket is used to recive mouse and keyboard input. self . reciveSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . reciveSocket . bind (( '' , 0 )) self . reciveSocket . setblocking ( 0 ) self . sendSocket . connect (( self . serverIP , self . serverPort )) screenRez = self . get_screen_resulotion () receiveSocetPort = self . reciveSocket . getsockname ()[ 1 ] message = \"C! {} ! {} ! {} ! {} \" . format ( screenRez [ 0 ], screenRez [ 1 ], receiveSocetPort , self . get_pc_name ()) message = message . encode () header = struct . pack ( '<L' , len ( message )) try : self . sendSocket . sendall ( header + message ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f 'Exception raisde { ex } ' ) self . reciveSocket . listen ( 5 ) while ( True ): try : self . conn , address = self . reciveSocket . accept () print ( \"from receive worker accepted {} {} \" . format ( self . conn , address )) break except BlockingIOError : pass mouse = MC () keyboard = KC () while ( self . alive ): try : headerData = self . _receive_n_bytes ( 4 ) if ( len ( headerData ) == 4 ): dataLen = struct . unpack ( '<L' , headerData )[ 0 ] self . data = self . _receive_n_bytes ( dataLen ) if len ( self . data ) == dataLen : self . data = self . data . decode () if ( self . data . split ( '!' )[ 0 ] == 'M' ): #Mouse position mouse . position = ( int (( float ( self . data . split ( '!' )[ 1 ]) * screenRez [ 0 ])), int (( float ( self . data . split ( '!' )[ 2 ]) * screenRez [ 1 ]))) elif ( self . data . split ( '!' )[ 0 ] == 'P' ): #Mouse button if ( self . data . split ( '!' )[ 2 ] == '1' ): #Mouse button pressed mouse . press ( eval ( self . data . split ( '!' )[ 1 ])) elif ( self . data . split ( '!' )[ 2 ] == '0' ): #Mouse button released mouse . release ( eval ( self . data . split ( '!' )[ 1 ])) elif ( self . data . split ( '!' )[ 0 ] == 'K' ): #Keyboard button try : if ( self . data [ 4 : 7 ] == 'Key' ): #Keyboard button pressed keyboard . press ( eval ( self . data . split ( '!' )[ 2 ])) else : keyboard . press ( self . data . split ( '!' )[ 2 ]) except Exception as ex : print ( ex ) elif ( self . data . split ( '!' )[ 0 ] == 'R' ): #Keyboard button released try : keyboard . release ( eval ( self . data . split ( '!' )[ 1 ])) except Exception as ex : print ( ex ) else : print ( \"Header data value is not equal to received data length\" ) except UnboundLocalError : pass except BlockingIOError : pass except IOError : pass self . conn . close () self . sendSocket . close () self . reciveSocket . close () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , '---- | ' , \"ReciveUserInput QRunnable terminated\" )","title":"Reciveuserinput"},{"location":"reciveuserinput.html#pro_110822.reciveuserinput.ReciveUserInput","text":"Bases: QRunnable Source code in pro_110822\\reciveuserinput.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 class ReciveUserInput ( QRunnable ): def __init__ ( self , serverIP : str , serverPort : str ) -> None : super ( ReciveUserInput , self ) . __init__ () self . serverIP = serverIP self . serverPort = int ( serverPort ) self . alive = True self . sendSocket = None self . reciveSocket = None self . data = None def get_screen_resulotion ( self ) -> tuple [ int , int ]: \"\"\" Get the screen width and hight. Args: None Returns: tuple[secreen width, screen hight] \"\"\" user32 = ctypes . windll . user32 screensize = user32 . GetSystemMetrics ( 0 ), user32 . GetSystemMetrics ( 1 ) return screensize def get_pc_name ( self ) -> str : \"\"\" Get the PC name. Args: None Returns: None \"\"\" return platform . node () def _receive_n_bytes ( self , n ): \"\"\" Receiving exactly n bytes from socket connection (assuming it's open and connected). \"\"\" data = '' . encode () while len ( data ) < n : chunk = self . conn . recv ( n - len ( data )) if (( chunk == '' . encode ())): break data += chunk return data @Slot () def run ( self ) -> None : \"\"\" The QRunnable run method. This method will be called when the QRunnable is started. Args: None Returns: None \"\"\" #sendSocket is used to send client info to the server. self . sendSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #reciveSocket is used to recive mouse and keyboard input. self . reciveSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . reciveSocket . bind (( '' , 0 )) self . reciveSocket . setblocking ( 0 ) self . sendSocket . connect (( self . serverIP , self . serverPort )) screenRez = self . get_screen_resulotion () receiveSocetPort = self . reciveSocket . getsockname ()[ 1 ] message = \"C! {} ! {} ! {} ! {} \" . format ( screenRez [ 0 ], screenRez [ 1 ], receiveSocetPort , self . get_pc_name ()) message = message . encode () header = struct . pack ( '<L' , len ( message )) try : self . sendSocket . sendall ( header + message ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f 'Exception raisde { ex } ' ) self . reciveSocket . listen ( 5 ) while ( True ): try : self . conn , address = self . reciveSocket . accept () print ( \"from receive worker accepted {} {} \" . format ( self . conn , address )) break except BlockingIOError : pass mouse = MC () keyboard = KC () while ( self . alive ): try : headerData = self . _receive_n_bytes ( 4 ) if ( len ( headerData ) == 4 ): dataLen = struct . unpack ( '<L' , headerData )[ 0 ] self . data = self . _receive_n_bytes ( dataLen ) if len ( self . data ) == dataLen : self . data = self . data . decode () if ( self . data . split ( '!' )[ 0 ] == 'M' ): #Mouse position mouse . position = ( int (( float ( self . data . split ( '!' )[ 1 ]) * screenRez [ 0 ])), int (( float ( self . data . split ( '!' )[ 2 ]) * screenRez [ 1 ]))) elif ( self . data . split ( '!' )[ 0 ] == 'P' ): #Mouse button if ( self . data . split ( '!' )[ 2 ] == '1' ): #Mouse button pressed mouse . press ( eval ( self . data . split ( '!' )[ 1 ])) elif ( self . data . split ( '!' )[ 2 ] == '0' ): #Mouse button released mouse . release ( eval ( self . data . split ( '!' )[ 1 ])) elif ( self . data . split ( '!' )[ 0 ] == 'K' ): #Keyboard button try : if ( self . data [ 4 : 7 ] == 'Key' ): #Keyboard button pressed keyboard . press ( eval ( self . data . split ( '!' )[ 2 ])) else : keyboard . press ( self . data . split ( '!' )[ 2 ]) except Exception as ex : print ( ex ) elif ( self . data . split ( '!' )[ 0 ] == 'R' ): #Keyboard button released try : keyboard . release ( eval ( self . data . split ( '!' )[ 1 ])) except Exception as ex : print ( ex ) else : print ( \"Header data value is not equal to received data length\" ) except UnboundLocalError : pass except BlockingIOError : pass except IOError : pass self . conn . close () self . sendSocket . close () self . reciveSocket . close () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , '---- | ' , \"ReciveUserInput QRunnable terminated\" )","title":"ReciveUserInput"},{"location":"reciveuserinput.html#pro_110822.reciveuserinput.ReciveUserInput.get_pc_name","text":"Get the PC name. Returns: Type Description str None Source code in pro_110822\\reciveuserinput.py 52 53 54 55 56 57 58 59 60 61 62 def get_pc_name ( self ) -> str : \"\"\" Get the PC name. Args: None Returns: None \"\"\" return platform . node ()","title":"get_pc_name()"},{"location":"reciveuserinput.html#pro_110822.reciveuserinput.ReciveUserInput.get_screen_resulotion","text":"Get the screen width and hight. Returns: Type Description tuple [ int , int ] tuple[secreen width, screen hight] Source code in pro_110822\\reciveuserinput.py 37 38 39 40 41 42 43 44 45 46 47 48 49 def get_screen_resulotion ( self ) -> tuple [ int , int ]: \"\"\" Get the screen width and hight. Args: None Returns: tuple[secreen width, screen hight] \"\"\" user32 = ctypes . windll . user32 screensize = user32 . GetSystemMetrics ( 0 ), user32 . GetSystemMetrics ( 1 ) return screensize","title":"get_screen_resulotion()"},{"location":"reciveuserinput.html#pro_110822.reciveuserinput.ReciveUserInput.run","text":"The QRunnable run method. This method will be called when the QRunnable is started. Returns: Type Description None None Source code in pro_110822\\reciveuserinput.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 @Slot () def run ( self ) -> None : \"\"\" The QRunnable run method. This method will be called when the QRunnable is started. Args: None Returns: None \"\"\" #sendSocket is used to send client info to the server. self . sendSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #reciveSocket is used to recive mouse and keyboard input. self . reciveSocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . reciveSocket . bind (( '' , 0 )) self . reciveSocket . setblocking ( 0 ) self . sendSocket . connect (( self . serverIP , self . serverPort )) screenRez = self . get_screen_resulotion () receiveSocetPort = self . reciveSocket . getsockname ()[ 1 ] message = \"C! {} ! {} ! {} ! {} \" . format ( screenRez [ 0 ], screenRez [ 1 ], receiveSocetPort , self . get_pc_name ()) message = message . encode () header = struct . pack ( '<L' , len ( message )) try : self . sendSocket . sendall ( header + message ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f 'Exception raisde { ex } ' ) self . reciveSocket . listen ( 5 ) while ( True ): try : self . conn , address = self . reciveSocket . accept () print ( \"from receive worker accepted {} {} \" . format ( self . conn , address )) break except BlockingIOError : pass mouse = MC () keyboard = KC () while ( self . alive ): try : headerData = self . _receive_n_bytes ( 4 ) if ( len ( headerData ) == 4 ): dataLen = struct . unpack ( '<L' , headerData )[ 0 ] self . data = self . _receive_n_bytes ( dataLen ) if len ( self . data ) == dataLen : self . data = self . data . decode () if ( self . data . split ( '!' )[ 0 ] == 'M' ): #Mouse position mouse . position = ( int (( float ( self . data . split ( '!' )[ 1 ]) * screenRez [ 0 ])), int (( float ( self . data . split ( '!' )[ 2 ]) * screenRez [ 1 ]))) elif ( self . data . split ( '!' )[ 0 ] == 'P' ): #Mouse button if ( self . data . split ( '!' )[ 2 ] == '1' ): #Mouse button pressed mouse . press ( eval ( self . data . split ( '!' )[ 1 ])) elif ( self . data . split ( '!' )[ 2 ] == '0' ): #Mouse button released mouse . release ( eval ( self . data . split ( '!' )[ 1 ])) elif ( self . data . split ( '!' )[ 0 ] == 'K' ): #Keyboard button try : if ( self . data [ 4 : 7 ] == 'Key' ): #Keyboard button pressed keyboard . press ( eval ( self . data . split ( '!' )[ 2 ])) else : keyboard . press ( self . data . split ( '!' )[ 2 ]) except Exception as ex : print ( ex ) elif ( self . data . split ( '!' )[ 0 ] == 'R' ): #Keyboard button released try : keyboard . release ( eval ( self . data . split ( '!' )[ 1 ])) except Exception as ex : print ( ex ) else : print ( \"Header data value is not equal to received data length\" ) except UnboundLocalError : pass except BlockingIOError : pass except IOError : pass self . conn . close () self . sendSocket . close () self . reciveSocket . close () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , '---- | ' , \"ReciveUserInput QRunnable terminated\" )","title":"run()"},{"location":"senduserinput.html","text":"Send mouse and keyboard input over a socket connection. CLASS SendUserInput contains the following methods __init__ get_screen_resulotion _on_move _on_click _on_scroll _on_press _on_release _keyboard_win32_event_filter _mouse_win32_event_filter supress_user_input start_listning _terminate_socket stop_listning send_input_to_client SendUserInput Source code in pro_110822\\senduserinput.pyclass SendUserInput (): def __init__ ( self ): self . activeConnection = None self . mouseListner = None self . keyboardListner = None self . activeWin32Filter = False self . screenCovered = False self . coverScreenProcess = None self . signal = SendUserInputSignals () self . keyBoard = keyboard . Controller () self . screenWidth = self . get_screen_resulotion ()[ 0 ] self . screenHight = self . get_screen_resulotion ()[ 1 ] def get_screen_resulotion ( self ): user32 = ctypes . windll . user32 screensize = user32 . GetSystemMetrics ( 0 ), user32 . GetSystemMetrics ( 1 ) return screensize @if_connected def _on_move ( self , x , y ): message = f 'M! { x / self . screenWidth } ! { y / self . screenHight } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_click ( self , x , y , button , pressed ): if pressed : message = f 'P! { button } !1! { x } ! { y } ' else : message = f 'P! { button } !0! { x } ! { y } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_scroll ( self , x , y , dx , dy ): if dy < 0 : message = f 'S!d! { x } ! { y } ' else : message = f 'S!u! { x } ! { y } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_press ( self , key ): if ( str ( key )[ 0 : 3 ] == 'Key' ): pass else : key = self . keyboardListner . canonical ( key ) try : message = f 'K!a! { key . char } ' except AttributeError : message = f 'K!s! { key } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_release ( self , key ): if ( str ( key )[ 0 : 3 ] == 'Key' ): pass else : key = self . keyboardListner . canonical ( key ) message = f 'R! { key } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) def _keyboard_win32_event_filter ( self , msg , data ): if ( self . activeWin32Filter ): self . keyboardListner . _suppress = True else : self . keyboardListner . _suppress = False def _mouse_win32_event_filter ( self , msg , data ): if ( self . activeWin32Filter ): if ( msg == 513 or msg == 514 or msg == 516 or msg == 517 or msg == 519 or msg == 520 or msg == 522 ): self . mouseListner . _suppress = True else : self . mouseListner . _suppress = False else : self . mouseListner . _suppress = False def supress_user_input ( self , supress : bool ) -> None : \"\"\" Calling this method will disable the mouse and keyboard input and will hide the mouse pointer. Args: supress: True, input supressed. False, input unsupressed. Returns: None \"\"\" if ( supress == True and self . screenCovered == False ): screenCoverScriptpath = os . path . dirname ( os . path . realpath ( __file__ )) screenCoverScriptpath = screenCoverScriptpath + '\\coverscreenalpha.py' self . coverScreenProcess = subprocess . Popen ([ \"py\" , screenCoverScriptpath ], stdout = PIPE , stderr = STDOUT ) self . screenCovered = True self . activeWin32Filter = True elif ( supress == False ): self . activeWin32Filter = False if ( self . screenCovered ): self . coverScreenProcess . kill () self . keyboardListner . _suppress = False try : self . keyBoard . press ( keyboard . Key . ctrl_l ) self . keyBoard . release ( keyboard . Key . ctrl_l ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exceptions raisde, press ctrl_l \\n { ex } ' ) try : self . keyBoard . press ( keyboard . Key . ctrl_r ) self . keyBoard . release ( keyboard . Key . ctrl_r ) except : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exceptions raisde, press ctrl_r \\n { ex } ' ) self . screenCovered = False def start_listning ( self ): \"\"\" Start the mouse and keyboard listner. To send the input to a socket, call the method send_input_to_client and provide a valid socket connection as an argument. Args: None Returns: None \"\"\" self . mouseListner = mouse . Listener ( on_move = self . _on_move , on_click = self . _on_click , on_scroll = self . _on_scroll , win32_event_filter = self . _mouse_win32_event_filter , suppress = False ) self . keyboardListner = keyboard . Listener ( on_press = self . _on_press , on_release = self . _on_release , win32_event_filter = self . _keyboard_win32_event_filter , suppress = False ) self . mouseListner . start () self . keyboardListner . start () def _terminate_socket ( self ) -> None : self . signal . socketTerminated . emit ( self . activeConnection . getsockname ()[ 1 ]) try : self . activeConnection . close () except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exception raisd while terminating socket \\n { self . activeConnection } \\n { ex } ' ) self . activeConnection = None self . supress_user_input ( False ) def stop_listning ( self ): \"\"\" Stop listning to the mouse and keyboard input. Args: None Returns: None \"\"\" self . supress_user_input ( False ) self . mouseListner . stop () self . keyboardListner . stop () self . activeConnection = None print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"LISTNINGSTOPED\" ) def send_input_to_client ( self , clientSocket : socket . socket ) -> None : \"\"\" Set the connection that the mouse and keyboard input will be sent to. Args: clientSocket: The connection that the mouse and keyboard input will be sent to Returns: None \"\"\" self . activeConnection = clientSocket send_input_to_client ( clientSocket ) Set the connection that the mouse and keyboard input will be sent to. Parameters: Name Type Description Default clientSocket socket . socket The connection that the mouse and keyboard input will be sent to required Returns: Type Description None None Source code in pro_110822\\senduserinput.py 249 250 251 252 253 254 255 256 257 258 259 260 261 def send_input_to_client ( self , clientSocket : socket . socket ) -> None : \"\"\" Set the connection that the mouse and keyboard input will be sent to. Args: clientSocket: The connection that the mouse and keyboard input will be sent to Returns: None \"\"\" self . activeConnection = clientSocket start_listning () Start the mouse and keyboard listner. To send the input to a socket, call the method send_input_to_client and provide a valid socket connection as an argument. Returns: Type Description None Source code in pro_110822\\senduserinput.py 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 def start_listning ( self ): \"\"\" Start the mouse and keyboard listner. To send the input to a socket, call the method send_input_to_client and provide a valid socket connection as an argument. Args: None Returns: None \"\"\" self . mouseListner = mouse . Listener ( on_move = self . _on_move , on_click = self . _on_click , on_scroll = self . _on_scroll , win32_event_filter = self . _mouse_win32_event_filter , suppress = False ) self . keyboardListner = keyboard . Listener ( on_press = self . _on_press , on_release = self . _on_release , win32_event_filter = self . _keyboard_win32_event_filter , suppress = False ) self . mouseListner . start () self . keyboardListner . start () stop_listning () Stop listning to the mouse and keyboard input. Returns: Type Description None Source code in pro_110822\\senduserinput.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 def stop_listning ( self ): \"\"\" Stop listning to the mouse and keyboard input. Args: None Returns: None \"\"\" self . supress_user_input ( False ) self . mouseListner . stop () self . keyboardListner . stop () self . activeConnection = None print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"LISTNINGSTOPED\" ) supress_user_input ( supress ) Calling this method will disable the mouse and keyboard input and will hide the mouse pointer. Parameters: Name Type Description Default supress bool True, input supressed. False, input unsupressed. required Returns: Type Description None None Source code in pro_110822\\senduserinput.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 def supress_user_input ( self , supress : bool ) -> None : \"\"\" Calling this method will disable the mouse and keyboard input and will hide the mouse pointer. Args: supress: True, input supressed. False, input unsupressed. Returns: None \"\"\" if ( supress == True and self . screenCovered == False ): screenCoverScriptpath = os . path . dirname ( os . path . realpath ( __file__ )) screenCoverScriptpath = screenCoverScriptpath + '\\coverscreenalpha.py' self . coverScreenProcess = subprocess . Popen ([ \"py\" , screenCoverScriptpath ], stdout = PIPE , stderr = STDOUT ) self . screenCovered = True self . activeWin32Filter = True elif ( supress == False ): self . activeWin32Filter = False if ( self . screenCovered ): self . coverScreenProcess . kill () self . keyboardListner . _suppress = False try : self . keyBoard . press ( keyboard . Key . ctrl_l ) self . keyBoard . release ( keyboard . Key . ctrl_l ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exceptions raisde, press ctrl_l \\n { ex } ' ) try : self . keyBoard . press ( keyboard . Key . ctrl_r ) self . keyBoard . release ( keyboard . Key . ctrl_r ) except : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exceptions raisde, press ctrl_r \\n { ex } ' ) self . screenCovered = False if_connected ( func ) A wrapper to some of the SendUserInput methods. The wrapper checks if a valid connection is established before calling the wrapped function. Source code in pro_110822\\senduserinput.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def if_connected ( func ): \"\"\" A wrapper to some of the SendUserInput methods. The wrapper checks if a valid connection is established before calling the wrapped function. \"\"\" @functools . wraps ( func ) def _wrapper ( self , * args , ** kwargs ): if (( self . mouseListner . is_alive () or self . keyboardListner . is_alive ()) and self . activeConnection ): try : func ( self , * args , ** kwargs ) except socket . error as error : if ( error . errno == 10054 or error . errno == 10053 ): self . _terminate_socket () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'socket error { error } [Handeled]' ) return else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'socket errno { error } [Unhandeled]' ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , ex ) return _wrapper","title":"Senduserinput"},{"location":"senduserinput.html#pro_110822.senduserinput.SendUserInput","text":"Source code in pro_110822\\senduserinput.pyclass SendUserInput (): def __init__ ( self ): self . activeConnection = None self . mouseListner = None self . keyboardListner = None self . activeWin32Filter = False self . screenCovered = False self . coverScreenProcess = None self . signal = SendUserInputSignals () self . keyBoard = keyboard . Controller () self . screenWidth = self . get_screen_resulotion ()[ 0 ] self . screenHight = self . get_screen_resulotion ()[ 1 ] def get_screen_resulotion ( self ): user32 = ctypes . windll . user32 screensize = user32 . GetSystemMetrics ( 0 ), user32 . GetSystemMetrics ( 1 ) return screensize @if_connected def _on_move ( self , x , y ): message = f 'M! { x / self . screenWidth } ! { y / self . screenHight } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_click ( self , x , y , button , pressed ): if pressed : message = f 'P! { button } !1! { x } ! { y } ' else : message = f 'P! { button } !0! { x } ! { y } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_scroll ( self , x , y , dx , dy ): if dy < 0 : message = f 'S!d! { x } ! { y } ' else : message = f 'S!u! { x } ! { y } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_press ( self , key ): if ( str ( key )[ 0 : 3 ] == 'Key' ): pass else : key = self . keyboardListner . canonical ( key ) try : message = f 'K!a! { key . char } ' except AttributeError : message = f 'K!s! { key } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) @if_connected def _on_release ( self , key ): if ( str ( key )[ 0 : 3 ] == 'Key' ): pass else : key = self . keyboardListner . canonical ( key ) message = f 'R! { key } ' message = message . encode () header = struct . pack ( '<L' , len ( message )) self . activeConnection . sendall ( header + message ) def _keyboard_win32_event_filter ( self , msg , data ): if ( self . activeWin32Filter ): self . keyboardListner . _suppress = True else : self . keyboardListner . _suppress = False def _mouse_win32_event_filter ( self , msg , data ): if ( self . activeWin32Filter ): if ( msg == 513 or msg == 514 or msg == 516 or msg == 517 or msg == 519 or msg == 520 or msg == 522 ): self . mouseListner . _suppress = True else : self . mouseListner . _suppress = False else : self . mouseListner . _suppress = False def supress_user_input ( self , supress : bool ) -> None : \"\"\" Calling this method will disable the mouse and keyboard input and will hide the mouse pointer. Args: supress: True, input supressed. False, input unsupressed. Returns: None \"\"\" if ( supress == True and self . screenCovered == False ): screenCoverScriptpath = os . path . dirname ( os . path . realpath ( __file__ )) screenCoverScriptpath = screenCoverScriptpath + '\\coverscreenalpha.py' self . coverScreenProcess = subprocess . Popen ([ \"py\" , screenCoverScriptpath ], stdout = PIPE , stderr = STDOUT ) self . screenCovered = True self . activeWin32Filter = True elif ( supress == False ): self . activeWin32Filter = False if ( self . screenCovered ): self . coverScreenProcess . kill () self . keyboardListner . _suppress = False try : self . keyBoard . press ( keyboard . Key . ctrl_l ) self . keyBoard . release ( keyboard . Key . ctrl_l ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exceptions raisde, press ctrl_l \\n { ex } ' ) try : self . keyBoard . press ( keyboard . Key . ctrl_r ) self . keyBoard . release ( keyboard . Key . ctrl_r ) except : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exceptions raisde, press ctrl_r \\n { ex } ' ) self . screenCovered = False def start_listning ( self ): \"\"\" Start the mouse and keyboard listner. To send the input to a socket, call the method send_input_to_client and provide a valid socket connection as an argument. Args: None Returns: None \"\"\" self . mouseListner = mouse . Listener ( on_move = self . _on_move , on_click = self . _on_click , on_scroll = self . _on_scroll , win32_event_filter = self . _mouse_win32_event_filter , suppress = False ) self . keyboardListner = keyboard . Listener ( on_press = self . _on_press , on_release = self . _on_release , win32_event_filter = self . _keyboard_win32_event_filter , suppress = False ) self . mouseListner . start () self . keyboardListner . start () def _terminate_socket ( self ) -> None : self . signal . socketTerminated . emit ( self . activeConnection . getsockname ()[ 1 ]) try : self . activeConnection . close () except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exception raisd while terminating socket \\n { self . activeConnection } \\n { ex } ' ) self . activeConnection = None self . supress_user_input ( False ) def stop_listning ( self ): \"\"\" Stop listning to the mouse and keyboard input. Args: None Returns: None \"\"\" self . supress_user_input ( False ) self . mouseListner . stop () self . keyboardListner . stop () self . activeConnection = None print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"LISTNINGSTOPED\" ) def send_input_to_client ( self , clientSocket : socket . socket ) -> None : \"\"\" Set the connection that the mouse and keyboard input will be sent to. Args: clientSocket: The connection that the mouse and keyboard input will be sent to Returns: None \"\"\" self . activeConnection = clientSocket","title":"SendUserInput"},{"location":"senduserinput.html#pro_110822.senduserinput.SendUserInput.send_input_to_client","text":"Set the connection that the mouse and keyboard input will be sent to. Parameters: Name Type Description Default clientSocket socket . socket The connection that the mouse and keyboard input will be sent to required Returns: Type Description None None Source code in pro_110822\\senduserinput.py 249 250 251 252 253 254 255 256 257 258 259 260 261 def send_input_to_client ( self , clientSocket : socket . socket ) -> None : \"\"\" Set the connection that the mouse and keyboard input will be sent to. Args: clientSocket: The connection that the mouse and keyboard input will be sent to Returns: None \"\"\" self . activeConnection = clientSocket","title":"send_input_to_client()"},{"location":"senduserinput.html#pro_110822.senduserinput.SendUserInput.start_listning","text":"Start the mouse and keyboard listner. To send the input to a socket, call the method send_input_to_client and provide a valid socket connection as an argument. Returns: Type Description None Source code in pro_110822\\senduserinput.py 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 def start_listning ( self ): \"\"\" Start the mouse and keyboard listner. To send the input to a socket, call the method send_input_to_client and provide a valid socket connection as an argument. Args: None Returns: None \"\"\" self . mouseListner = mouse . Listener ( on_move = self . _on_move , on_click = self . _on_click , on_scroll = self . _on_scroll , win32_event_filter = self . _mouse_win32_event_filter , suppress = False ) self . keyboardListner = keyboard . Listener ( on_press = self . _on_press , on_release = self . _on_release , win32_event_filter = self . _keyboard_win32_event_filter , suppress = False ) self . mouseListner . start () self . keyboardListner . start ()","title":"start_listning()"},{"location":"senduserinput.html#pro_110822.senduserinput.SendUserInput.stop_listning","text":"Stop listning to the mouse and keyboard input. Returns: Type Description None Source code in pro_110822\\senduserinput.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 def stop_listning ( self ): \"\"\" Stop listning to the mouse and keyboard input. Args: None Returns: None \"\"\" self . supress_user_input ( False ) self . mouseListner . stop () self . keyboardListner . stop () self . activeConnection = None print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , \"LISTNINGSTOPED\" )","title":"stop_listning()"},{"location":"senduserinput.html#pro_110822.senduserinput.SendUserInput.supress_user_input","text":"Calling this method will disable the mouse and keyboard input and will hide the mouse pointer. Parameters: Name Type Description Default supress bool True, input supressed. False, input unsupressed. required Returns: Type Description None None Source code in pro_110822\\senduserinput.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 def supress_user_input ( self , supress : bool ) -> None : \"\"\" Calling this method will disable the mouse and keyboard input and will hide the mouse pointer. Args: supress: True, input supressed. False, input unsupressed. Returns: None \"\"\" if ( supress == True and self . screenCovered == False ): screenCoverScriptpath = os . path . dirname ( os . path . realpath ( __file__ )) screenCoverScriptpath = screenCoverScriptpath + '\\coverscreenalpha.py' self . coverScreenProcess = subprocess . Popen ([ \"py\" , screenCoverScriptpath ], stdout = PIPE , stderr = STDOUT ) self . screenCovered = True self . activeWin32Filter = True elif ( supress == False ): self . activeWin32Filter = False if ( self . screenCovered ): self . coverScreenProcess . kill () self . keyboardListner . _suppress = False try : self . keyBoard . press ( keyboard . Key . ctrl_l ) self . keyBoard . release ( keyboard . Key . ctrl_l ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exceptions raisde, press ctrl_l \\n { ex } ' ) try : self . keyBoard . press ( keyboard . Key . ctrl_r ) self . keyBoard . release ( keyboard . Key . ctrl_r ) except : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exceptions raisde, press ctrl_r \\n { ex } ' ) self . screenCovered = False","title":"supress_user_input()"},{"location":"senduserinput.html#pro_110822.senduserinput.if_connected","text":"A wrapper to some of the SendUserInput methods. The wrapper checks if a valid connection is established before calling the wrapped function. Source code in pro_110822\\senduserinput.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def if_connected ( func ): \"\"\" A wrapper to some of the SendUserInput methods. The wrapper checks if a valid connection is established before calling the wrapped function. \"\"\" @functools . wraps ( func ) def _wrapper ( self , * args , ** kwargs ): if (( self . mouseListner . is_alive () or self . keyboardListner . is_alive ()) and self . activeConnection ): try : func ( self , * args , ** kwargs ) except socket . error as error : if ( error . errno == 10054 or error . errno == 10053 ): self . _terminate_socket () print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'socket error { error } [Handeled]' ) return else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'socket errno { error } [Unhandeled]' ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , ex ) return _wrapper","title":"if_connected()"},{"location":"shortcuthandle.html","text":"ShortcutsHandle Define a shortcut and a method to ba called when the shortcut is pressed Source code in pro_110822\\shortcuthandle.pyclass ShortcutsHandle (): \"\"\"Define a shortcut and a method to ba called when the shortcut is pressed\"\"\" def __init__ ( self , calledObject ): self . _shortcutListener = False self . _savedShortcuts = [] self . calledObject = calledObject #Start the listener. def _start_shortcut_listener ( self , argg ): if ( len ( argg ) > 0 ): self . _shortcutListener = keyboard . GlobalHotKeys ( eval ( argg )) self . _shortcutListener . start () else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , 'Empty argument passed to _shortcutListner' ) #Stop the listener and restart it. def _refresh_shortcut_listener ( self , argg ): if ( len ( argg ) > 0 ): self . _shortcutListener . stop () self . _shortcutListener = keyboard . GlobalHotKeys ( eval ( argg )) self . _shortcutListener . start () else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , 'Empty argument passed to _refresh_shortcut_lister' ) #Stop the listner. def _stop_shortcut_listener ( self ): self . _shortcutListener . stop () #Define the shortcuts that the listener will listen to. def define_shortcut ( self , * args : list [ tuple [ str , str ]], addToExist : bool = False , passShortcut = False ) -> None : \"\"\"Define a shortcut. Examples: >>> class HelloClass(): ... def hello_method(self, message): ... print(f'Hello there! You are here because the shortcut {message} was pressed!') >>> Hello = HelloClass() >>> Shortcut = ShortcutsHandle(Hello) >>> Shortcut.define_shortcut(('<ctrl>+x', 'hello_method'), passShortcut = True) shortcuthandle.py | define_shortcut | <module> || Started shortcut listener with argument : {'<ctrl>+x': lambda self = self : self.calledObject.hello_method('<ctrl>+x')} [-] >>> from pynput.keyboard import Key, Controller >>> keyboard = Controller() >>> keyboard.press(Key.ctrl) >>> keyboard.press('x') >>> import time >>> time.sleep(0.1) Hello there! You are here because the shortcut <ctrl>+x was pressed! >>> keyboard.release(Key.ctrl) >>> keyboard.release('x') >>> Shortcut.remove_shortcut('<ctrl>+x') >>> keyboard.press(Key.ctrl) >>> keyboard.press('x') >>> time.sleep(0.1) >>> keyboard.release(Key.ctrl) >>> keyboard.release('x') Args: *args (list[tuple[str, str]): The first element in the tuple is the shortcut. The second element is the method to be called when the shortcut is pressed. addToExist (bool) : If true, the passed shortcuts are added to any existing shortcuts If false, any existing shortcuts are removed and the passed shortcuts are defined passShortcut (bool) : If true, the pressed shortcut is passed to the method to be called when the shortcut is pressed. PS: Its not possible to pass any arguemnts - other than the pressed shortcut - to the method to be called when the shortcut is pressed. This will be fixed in the future. Returns: None \"\"\" #args: list[(str, str)], the arguemnt passed when the method is called. #self._savedShortcuts: list[(str, str)], the shortcuts that are currently in use. if ( len ( args ) == 0 ): if self . _shortcutListener : self . _stop_shortcut_listener () return elif ( addToExist == True ): #changin args from tuple -> list #adding the existing saved shortcuts to the passed shortcuts (args) args = list ( args ) args . extend ( self . _savedShortcuts ) else : self . _savedShortcuts = [] self . _savedShortcuts . extend ( args ) argg = '{' #argg: list, is the argument passed to self._shortcutListner for _ in range ( len ( args )): #each element in args is of the form: element(shortcut: str, function: str') if ( len ( args [ _ ]) == 2 and ( args [ _ ][ 0 ][ - 4 :] == 'PASS' )): #if the last four latters in the shortcut string == 'PASS' -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ][: - 4 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ( \\' { args [ _ ][ 0 ][: - 4 ] } \\' )' + ', ' elif ( len ( args [ _ ]) == 2 and ( args [ _ ][ 0 ][ - 5 :] == 'DONOT' )): #if the last five latters in the shortcut string == 'DONOT' -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ][: - 5 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ()' + ', ' elif ( len ( args [ _ ]) == 2 and ( passShortcut )): #if the passed shortcut string does not end with neither 'PASS' nor 'DONOT' #and passShortcut -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ( \\' { args [ _ ][ 0 ] } \\' )' + ', ' elif ( len ( args [ _ ]) == 2 and ( not passShortcut )): #if the passed shortcut string does not end with neither 'PASS' nor 'DONOT' #and not passShortcut -> #call lambda and do not pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ()' + ', ' else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f ' { args } is invalied argument.' ) return argg = argg [: - 2 ] + '}' #iterate through each passed argument #if passShortcut -> #add 'PASS' to the end of the shortcut (if it does not have neither 'PASS' nor 'DONOT') #else -> add 'DONOT' (if it does not have neither 'PASS' nor 'DONOT') args = list ( args ) for index , _ in enumerate ( args ): if ( passShortcut ): temp = list ( args [ index ]) if ( temp [ 0 ][ - 4 :] == 'PASS' or temp [ 0 ][ - 5 :] == 'DONOT' ): pass else : temp [ 0 ] = temp [ 0 ] + 'PASS' args [ index ] = tuple ( temp ) else : temp = list ( args [ index ]) if ( temp [ 0 ][ - 5 :] == 'DONOT' or temp [ 0 ][ - 4 :] == 'PASS' ): pass else : temp [ 0 ] = temp [ 0 ] + 'DONOT' args [ index ] = tuple ( temp ) #if the method is called with passShortcut -> args allready has the shortcuts in self._savedShortcuts -> #its safe to: self._savedShortcuts = [] #if the method is called with passShortcut = False -> self._savedShortcuts is emptyd and the shortcuts in args are added to it. self . _savedShortcuts = [] for item in args : if ( item not in self . _savedShortcuts ): self . _savedShortcuts . append ( item ) if self . _shortcutListener : self . _refresh_shortcut_listener ( argg ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Started shortcut listener with argument : { argg } [Refresh]' ) else : self . _start_shortcut_listener ( argg ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Started shortcut listener with argument : { argg } [-]' ) def remove_shortcut ( self , shortcut : str ) -> None : \"\"\"\"Remove a shortcut. The listener will stop listning to the removed shortcut\"\"\" try : for el in self . _savedShortcuts : if ( el [ 0 ] == shortcut + 'PASS' or el [ 0 ] == shortcut + 'DONOT' ): self . _savedShortcuts . remove ( el ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exception raised : { ex } ' ) return self . define_shortcut ( * self . _savedShortcuts , addToExist = False , passShortcut = True ) define_shortcut ( * args , addToExist = False , passShortcut = False ) Define a shortcut. Examples: >>> class HelloClass (): ... def hello_method ( self , message ): ... print ( f 'Hello there! You are here because the shortcut { message } was pressed!' ) >>> Hello = HelloClass () >>> Shortcut = ShortcutsHandle ( Hello ) >>> Shortcut . define_shortcut (( '<ctrl>+x' , 'hello_method' ), passShortcut = True ) shortcuthandle.py | define_shortcut | <module> || Started shortcut listener with argument : {'<ctrl>+x': lambda self = self : self.calledObject.hello_method('<ctrl>+x')} [-] >>> from pynput.keyboard import Key , Controller >>> keyboard = Controller () >>> keyboard . press ( Key . ctrl ) >>> keyboard . press ( 'x' ) >>> import time >>> time . sleep ( 0.1 ) Hello there! You are here because the shortcut <ctrl>+x was pressed! >>> keyboard . release ( Key . ctrl ) >>> keyboard . release ( 'x' ) >>> Shortcut . remove_shortcut ( '<ctrl>+x' ) >>> keyboard . press ( Key . ctrl ) >>> keyboard . press ( 'x' ) >>> time . sleep ( 0.1 ) >>> keyboard . release ( Key . ctrl ) >>> keyboard . release ( 'x' ) Parameters: Name Type Description Default *args list[tuple[str, str] The first element in the tuple is the shortcut. The second element is the method to be called when the shortcut is pressed. () addToExist bool) If true, the passed shortcuts are added to any existing shortcuts If false, any existing shortcuts are removed and the passed shortcuts are defined False passShortcut bool) If true, the pressed shortcut is passed to the method to be called when the shortcut is pressed. PS: Its not possible to pass any arguemnts - other than the pressed shortcut - to the method to be called when the shortcut is pressed. This will be fixed in the future. False Returns: Type Description None None Source code in pro_110822\\shortcuthandle.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def define_shortcut ( self , * args : list [ tuple [ str , str ]], addToExist : bool = False , passShortcut = False ) -> None : \"\"\"Define a shortcut. Examples: >>> class HelloClass(): ... def hello_method(self, message): ... print(f'Hello there! You are here because the shortcut {message} was pressed!') >>> Hello = HelloClass() >>> Shortcut = ShortcutsHandle(Hello) >>> Shortcut.define_shortcut(('<ctrl>+x', 'hello_method'), passShortcut = True) shortcuthandle.py | define_shortcut | <module> || Started shortcut listener with argument : {'<ctrl>+x': lambda self = self : self.calledObject.hello_method('<ctrl>+x')} [-] >>> from pynput.keyboard import Key, Controller >>> keyboard = Controller() >>> keyboard.press(Key.ctrl) >>> keyboard.press('x') >>> import time >>> time.sleep(0.1) Hello there! You are here because the shortcut <ctrl>+x was pressed! >>> keyboard.release(Key.ctrl) >>> keyboard.release('x') >>> Shortcut.remove_shortcut('<ctrl>+x') >>> keyboard.press(Key.ctrl) >>> keyboard.press('x') >>> time.sleep(0.1) >>> keyboard.release(Key.ctrl) >>> keyboard.release('x') Args: *args (list[tuple[str, str]): The first element in the tuple is the shortcut. The second element is the method to be called when the shortcut is pressed. addToExist (bool) : If true, the passed shortcuts are added to any existing shortcuts If false, any existing shortcuts are removed and the passed shortcuts are defined passShortcut (bool) : If true, the pressed shortcut is passed to the method to be called when the shortcut is pressed. PS: Its not possible to pass any arguemnts - other than the pressed shortcut - to the method to be called when the shortcut is pressed. This will be fixed in the future. Returns: None \"\"\" #args: list[(str, str)], the arguemnt passed when the method is called. #self._savedShortcuts: list[(str, str)], the shortcuts that are currently in use. if ( len ( args ) == 0 ): if self . _shortcutListener : self . _stop_shortcut_listener () return elif ( addToExist == True ): #changin args from tuple -> list #adding the existing saved shortcuts to the passed shortcuts (args) args = list ( args ) args . extend ( self . _savedShortcuts ) else : self . _savedShortcuts = [] self . _savedShortcuts . extend ( args ) argg = '{' #argg: list, is the argument passed to self._shortcutListner for _ in range ( len ( args )): #each element in args is of the form: element(shortcut: str, function: str') if ( len ( args [ _ ]) == 2 and ( args [ _ ][ 0 ][ - 4 :] == 'PASS' )): #if the last four latters in the shortcut string == 'PASS' -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ][: - 4 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ( \\' { args [ _ ][ 0 ][: - 4 ] } \\' )' + ', ' elif ( len ( args [ _ ]) == 2 and ( args [ _ ][ 0 ][ - 5 :] == 'DONOT' )): #if the last five latters in the shortcut string == 'DONOT' -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ][: - 5 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ()' + ', ' elif ( len ( args [ _ ]) == 2 and ( passShortcut )): #if the passed shortcut string does not end with neither 'PASS' nor 'DONOT' #and passShortcut -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ( \\' { args [ _ ][ 0 ] } \\' )' + ', ' elif ( len ( args [ _ ]) == 2 and ( not passShortcut )): #if the passed shortcut string does not end with neither 'PASS' nor 'DONOT' #and not passShortcut -> #call lambda and do not pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ()' + ', ' else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f ' { args } is invalied argument.' ) return argg = argg [: - 2 ] + '}' #iterate through each passed argument #if passShortcut -> #add 'PASS' to the end of the shortcut (if it does not have neither 'PASS' nor 'DONOT') #else -> add 'DONOT' (if it does not have neither 'PASS' nor 'DONOT') args = list ( args ) for index , _ in enumerate ( args ): if ( passShortcut ): temp = list ( args [ index ]) if ( temp [ 0 ][ - 4 :] == 'PASS' or temp [ 0 ][ - 5 :] == 'DONOT' ): pass else : temp [ 0 ] = temp [ 0 ] + 'PASS' args [ index ] = tuple ( temp ) else : temp = list ( args [ index ]) if ( temp [ 0 ][ - 5 :] == 'DONOT' or temp [ 0 ][ - 4 :] == 'PASS' ): pass else : temp [ 0 ] = temp [ 0 ] + 'DONOT' args [ index ] = tuple ( temp ) #if the method is called with passShortcut -> args allready has the shortcuts in self._savedShortcuts -> #its safe to: self._savedShortcuts = [] #if the method is called with passShortcut = False -> self._savedShortcuts is emptyd and the shortcuts in args are added to it. self . _savedShortcuts = [] for item in args : if ( item not in self . _savedShortcuts ): self . _savedShortcuts . append ( item ) if self . _shortcutListener : self . _refresh_shortcut_listener ( argg ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Started shortcut listener with argument : { argg } [Refresh]' ) else : self . _start_shortcut_listener ( argg ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Started shortcut listener with argument : { argg } [-]' ) remove_shortcut ( shortcut ) \"Remove a shortcut. The listener will stop listning to the removed shortcut Source code in pro_110822\\shortcuthandle.py 146 147 148 149 150 151 152 153 154 155 156 def remove_shortcut ( self , shortcut : str ) -> None : \"\"\"\"Remove a shortcut. The listener will stop listning to the removed shortcut\"\"\" try : for el in self . _savedShortcuts : if ( el [ 0 ] == shortcut + 'PASS' or el [ 0 ] == shortcut + 'DONOT' ): self . _savedShortcuts . remove ( el ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exception raised : { ex } ' ) return self . define_shortcut ( * self . _savedShortcuts , addToExist = False , passShortcut = True )","title":"Shortcuthandle"},{"location":"shortcuthandle.html#pro_110822.shortcuthandle.ShortcutsHandle","text":"Define a shortcut and a method to ba called when the shortcut is pressed Source code in pro_110822\\shortcuthandle.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 class ShortcutsHandle (): \"\"\"Define a shortcut and a method to ba called when the shortcut is pressed\"\"\" def __init__ ( self , calledObject ): self . _shortcutListener = False self . _savedShortcuts = [] self . calledObject = calledObject #Start the listener. def _start_shortcut_listener ( self , argg ): if ( len ( argg ) > 0 ): self . _shortcutListener = keyboard . GlobalHotKeys ( eval ( argg )) self . _shortcutListener . start () else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , 'Empty argument passed to _shortcutListner' ) #Stop the listener and restart it. def _refresh_shortcut_listener ( self , argg ): if ( len ( argg ) > 0 ): self . _shortcutListener . stop () self . _shortcutListener = keyboard . GlobalHotKeys ( eval ( argg )) self . _shortcutListener . start () else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , 'Empty argument passed to _refresh_shortcut_lister' ) #Stop the listner. def _stop_shortcut_listener ( self ): self . _shortcutListener . stop () #Define the shortcuts that the listener will listen to. def define_shortcut ( self , * args : list [ tuple [ str , str ]], addToExist : bool = False , passShortcut = False ) -> None : \"\"\"Define a shortcut. Examples: >>> class HelloClass(): ... def hello_method(self, message): ... print(f'Hello there! You are here because the shortcut {message} was pressed!') >>> Hello = HelloClass() >>> Shortcut = ShortcutsHandle(Hello) >>> Shortcut.define_shortcut(('<ctrl>+x', 'hello_method'), passShortcut = True) shortcuthandle.py | define_shortcut | <module> || Started shortcut listener with argument : {'<ctrl>+x': lambda self = self : self.calledObject.hello_method('<ctrl>+x')} [-] >>> from pynput.keyboard import Key, Controller >>> keyboard = Controller() >>> keyboard.press(Key.ctrl) >>> keyboard.press('x') >>> import time >>> time.sleep(0.1) Hello there! You are here because the shortcut <ctrl>+x was pressed! >>> keyboard.release(Key.ctrl) >>> keyboard.release('x') >>> Shortcut.remove_shortcut('<ctrl>+x') >>> keyboard.press(Key.ctrl) >>> keyboard.press('x') >>> time.sleep(0.1) >>> keyboard.release(Key.ctrl) >>> keyboard.release('x') Args: *args (list[tuple[str, str]): The first element in the tuple is the shortcut. The second element is the method to be called when the shortcut is pressed. addToExist (bool) : If true, the passed shortcuts are added to any existing shortcuts If false, any existing shortcuts are removed and the passed shortcuts are defined passShortcut (bool) : If true, the pressed shortcut is passed to the method to be called when the shortcut is pressed. PS: Its not possible to pass any arguemnts - other than the pressed shortcut - to the method to be called when the shortcut is pressed. This will be fixed in the future. Returns: None \"\"\" #args: list[(str, str)], the arguemnt passed when the method is called. #self._savedShortcuts: list[(str, str)], the shortcuts that are currently in use. if ( len ( args ) == 0 ): if self . _shortcutListener : self . _stop_shortcut_listener () return elif ( addToExist == True ): #changin args from tuple -> list #adding the existing saved shortcuts to the passed shortcuts (args) args = list ( args ) args . extend ( self . _savedShortcuts ) else : self . _savedShortcuts = [] self . _savedShortcuts . extend ( args ) argg = '{' #argg: list, is the argument passed to self._shortcutListner for _ in range ( len ( args )): #each element in args is of the form: element(shortcut: str, function: str') if ( len ( args [ _ ]) == 2 and ( args [ _ ][ 0 ][ - 4 :] == 'PASS' )): #if the last four latters in the shortcut string == 'PASS' -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ][: - 4 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ( \\' { args [ _ ][ 0 ][: - 4 ] } \\' )' + ', ' elif ( len ( args [ _ ]) == 2 and ( args [ _ ][ 0 ][ - 5 :] == 'DONOT' )): #if the last five latters in the shortcut string == 'DONOT' -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ][: - 5 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ()' + ', ' elif ( len ( args [ _ ]) == 2 and ( passShortcut )): #if the passed shortcut string does not end with neither 'PASS' nor 'DONOT' #and passShortcut -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ( \\' { args [ _ ][ 0 ] } \\' )' + ', ' elif ( len ( args [ _ ]) == 2 and ( not passShortcut )): #if the passed shortcut string does not end with neither 'PASS' nor 'DONOT' #and not passShortcut -> #call lambda and do not pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ()' + ', ' else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f ' { args } is invalied argument.' ) return argg = argg [: - 2 ] + '}' #iterate through each passed argument #if passShortcut -> #add 'PASS' to the end of the shortcut (if it does not have neither 'PASS' nor 'DONOT') #else -> add 'DONOT' (if it does not have neither 'PASS' nor 'DONOT') args = list ( args ) for index , _ in enumerate ( args ): if ( passShortcut ): temp = list ( args [ index ]) if ( temp [ 0 ][ - 4 :] == 'PASS' or temp [ 0 ][ - 5 :] == 'DONOT' ): pass else : temp [ 0 ] = temp [ 0 ] + 'PASS' args [ index ] = tuple ( temp ) else : temp = list ( args [ index ]) if ( temp [ 0 ][ - 5 :] == 'DONOT' or temp [ 0 ][ - 4 :] == 'PASS' ): pass else : temp [ 0 ] = temp [ 0 ] + 'DONOT' args [ index ] = tuple ( temp ) #if the method is called with passShortcut -> args allready has the shortcuts in self._savedShortcuts -> #its safe to: self._savedShortcuts = [] #if the method is called with passShortcut = False -> self._savedShortcuts is emptyd and the shortcuts in args are added to it. self . _savedShortcuts = [] for item in args : if ( item not in self . _savedShortcuts ): self . _savedShortcuts . append ( item ) if self . _shortcutListener : self . _refresh_shortcut_listener ( argg ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Started shortcut listener with argument : { argg } [Refresh]' ) else : self . _start_shortcut_listener ( argg ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Started shortcut listener with argument : { argg } [-]' ) def remove_shortcut ( self , shortcut : str ) -> None : \"\"\"\"Remove a shortcut. The listener will stop listning to the removed shortcut\"\"\" try : for el in self . _savedShortcuts : if ( el [ 0 ] == shortcut + 'PASS' or el [ 0 ] == shortcut + 'DONOT' ): self . _savedShortcuts . remove ( el ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exception raised : { ex } ' ) return self . define_shortcut ( * self . _savedShortcuts , addToExist = False , passShortcut = True )","title":"ShortcutsHandle"},{"location":"shortcuthandle.html#pro_110822.shortcuthandle.ShortcutsHandle.define_shortcut","text":"Define a shortcut. Examples: >>> class HelloClass (): ... def hello_method ( self , message ): ... print ( f 'Hello there! You are here because the shortcut { message } was pressed!' ) >>> Hello = HelloClass () >>> Shortcut = ShortcutsHandle ( Hello ) >>> Shortcut . define_shortcut (( '<ctrl>+x' , 'hello_method' ), passShortcut = True ) shortcuthandle.py | define_shortcut | <module> || Started shortcut listener with argument : {'<ctrl>+x': lambda self = self : self.calledObject.hello_method('<ctrl>+x')} [-] >>> from pynput.keyboard import Key , Controller >>> keyboard = Controller () >>> keyboard . press ( Key . ctrl ) >>> keyboard . press ( 'x' ) >>> import time >>> time . sleep ( 0.1 ) Hello there! You are here because the shortcut <ctrl>+x was pressed! >>> keyboard . release ( Key . ctrl ) >>> keyboard . release ( 'x' ) >>> Shortcut . remove_shortcut ( '<ctrl>+x' ) >>> keyboard . press ( Key . ctrl ) >>> keyboard . press ( 'x' ) >>> time . sleep ( 0.1 ) >>> keyboard . release ( Key . ctrl ) >>> keyboard . release ( 'x' ) Parameters: Name Type Description Default *args list[tuple[str, str] The first element in the tuple is the shortcut. The second element is the method to be called when the shortcut is pressed. () addToExist bool) If true, the passed shortcuts are added to any existing shortcuts If false, any existing shortcuts are removed and the passed shortcuts are defined False passShortcut bool) If true, the pressed shortcut is passed to the method to be called when the shortcut is pressed. PS: Its not possible to pass any arguemnts - other than the pressed shortcut - to the method to be called when the shortcut is pressed. This will be fixed in the future. False Returns: Type Description None None Source code in pro_110822\\shortcuthandle.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def define_shortcut ( self , * args : list [ tuple [ str , str ]], addToExist : bool = False , passShortcut = False ) -> None : \"\"\"Define a shortcut. Examples: >>> class HelloClass(): ... def hello_method(self, message): ... print(f'Hello there! You are here because the shortcut {message} was pressed!') >>> Hello = HelloClass() >>> Shortcut = ShortcutsHandle(Hello) >>> Shortcut.define_shortcut(('<ctrl>+x', 'hello_method'), passShortcut = True) shortcuthandle.py | define_shortcut | <module> || Started shortcut listener with argument : {'<ctrl>+x': lambda self = self : self.calledObject.hello_method('<ctrl>+x')} [-] >>> from pynput.keyboard import Key, Controller >>> keyboard = Controller() >>> keyboard.press(Key.ctrl) >>> keyboard.press('x') >>> import time >>> time.sleep(0.1) Hello there! You are here because the shortcut <ctrl>+x was pressed! >>> keyboard.release(Key.ctrl) >>> keyboard.release('x') >>> Shortcut.remove_shortcut('<ctrl>+x') >>> keyboard.press(Key.ctrl) >>> keyboard.press('x') >>> time.sleep(0.1) >>> keyboard.release(Key.ctrl) >>> keyboard.release('x') Args: *args (list[tuple[str, str]): The first element in the tuple is the shortcut. The second element is the method to be called when the shortcut is pressed. addToExist (bool) : If true, the passed shortcuts are added to any existing shortcuts If false, any existing shortcuts are removed and the passed shortcuts are defined passShortcut (bool) : If true, the pressed shortcut is passed to the method to be called when the shortcut is pressed. PS: Its not possible to pass any arguemnts - other than the pressed shortcut - to the method to be called when the shortcut is pressed. This will be fixed in the future. Returns: None \"\"\" #args: list[(str, str)], the arguemnt passed when the method is called. #self._savedShortcuts: list[(str, str)], the shortcuts that are currently in use. if ( len ( args ) == 0 ): if self . _shortcutListener : self . _stop_shortcut_listener () return elif ( addToExist == True ): #changin args from tuple -> list #adding the existing saved shortcuts to the passed shortcuts (args) args = list ( args ) args . extend ( self . _savedShortcuts ) else : self . _savedShortcuts = [] self . _savedShortcuts . extend ( args ) argg = '{' #argg: list, is the argument passed to self._shortcutListner for _ in range ( len ( args )): #each element in args is of the form: element(shortcut: str, function: str') if ( len ( args [ _ ]) == 2 and ( args [ _ ][ 0 ][ - 4 :] == 'PASS' )): #if the last four latters in the shortcut string == 'PASS' -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ][: - 4 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ( \\' { args [ _ ][ 0 ][: - 4 ] } \\' )' + ', ' elif ( len ( args [ _ ]) == 2 and ( args [ _ ][ 0 ][ - 5 :] == 'DONOT' )): #if the last five latters in the shortcut string == 'DONOT' -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ][: - 5 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ()' + ', ' elif ( len ( args [ _ ]) == 2 and ( passShortcut )): #if the passed shortcut string does not end with neither 'PASS' nor 'DONOT' #and passShortcut -> #call lambda and pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ( \\' { args [ _ ][ 0 ] } \\' )' + ', ' elif ( len ( args [ _ ]) == 2 and ( not passShortcut )): #if the passed shortcut string does not end with neither 'PASS' nor 'DONOT' #and not passShortcut -> #call lambda and do not pass the shortcut argg = argg + \"'\" + args [ _ ][ 0 ] + \"'\" + ':' + f ' lambda self = self : self.calledObject. { args [ _ ][ 1 ] } ()' + ', ' else : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f ' { args } is invalied argument.' ) return argg = argg [: - 2 ] + '}' #iterate through each passed argument #if passShortcut -> #add 'PASS' to the end of the shortcut (if it does not have neither 'PASS' nor 'DONOT') #else -> add 'DONOT' (if it does not have neither 'PASS' nor 'DONOT') args = list ( args ) for index , _ in enumerate ( args ): if ( passShortcut ): temp = list ( args [ index ]) if ( temp [ 0 ][ - 4 :] == 'PASS' or temp [ 0 ][ - 5 :] == 'DONOT' ): pass else : temp [ 0 ] = temp [ 0 ] + 'PASS' args [ index ] = tuple ( temp ) else : temp = list ( args [ index ]) if ( temp [ 0 ][ - 5 :] == 'DONOT' or temp [ 0 ][ - 4 :] == 'PASS' ): pass else : temp [ 0 ] = temp [ 0 ] + 'DONOT' args [ index ] = tuple ( temp ) #if the method is called with passShortcut -> args allready has the shortcuts in self._savedShortcuts -> #its safe to: self._savedShortcuts = [] #if the method is called with passShortcut = False -> self._savedShortcuts is emptyd and the shortcuts in args are added to it. self . _savedShortcuts = [] for item in args : if ( item not in self . _savedShortcuts ): self . _savedShortcuts . append ( item ) if self . _shortcutListener : self . _refresh_shortcut_listener ( argg ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Started shortcut listener with argument : { argg } [Refresh]' ) else : self . _start_shortcut_listener ( argg ) print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Started shortcut listener with argument : { argg } [-]' )","title":"define_shortcut()"},{"location":"shortcuthandle.html#pro_110822.shortcuthandle.ShortcutsHandle.remove_shortcut","text":"\"Remove a shortcut. The listener will stop listning to the removed shortcut Source code in pro_110822\\shortcuthandle.py 146 147 148 149 150 151 152 153 154 155 156 def remove_shortcut ( self , shortcut : str ) -> None : \"\"\"\"Remove a shortcut. The listener will stop listning to the removed shortcut\"\"\" try : for el in self . _savedShortcuts : if ( el [ 0 ] == shortcut + 'PASS' or el [ 0 ] == shortcut + 'DONOT' ): self . _savedShortcuts . remove ( el ) except Exception as ex : print ( f ' { os . path . basename ( __file__ ) } | ' , f ' { inspect . stack ()[ 0 ][ 3 ] } | ' , f ' { inspect . stack ()[ 1 ][ 3 ] } || ' , f 'Exception raised : { ex } ' ) return self . define_shortcut ( * self . _savedShortcuts , addToExist = False , passShortcut = True )","title":"remove_shortcut()"},{"location":"tests.html","text":"","title":"Tests"}]}